<?xml version="1.0"?>
<doc>
	<assembly>
		<name>SilUtils</name>
	</assembly>
	<members>
		<member name="T:SilUtils.ISplashScreen">
			----------------------------------------------------------------------------------------
			<summary>
			Public interface (exported with COM wrapper) for the splash screen
			</summary>
			----------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.ISplashScreen.Show">
			----------------------------------------------------------------------------------------
			<summary>
			Shows the splash screen
			</summary>
			----------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.ISplashScreen.Show(System.Boolean,System.Boolean)">
			----------------------------------------------------------------------------------------
			<summary>
			Shows the splash screen
			</summary>
			----------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.ISplashScreen.ShowWithoutFade">
			----------------------------------------------------------------------------------------
			<summary>
			Shows the splash screen without the fading feature.
			</summary>
			----------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.ISplashScreen.Activate">
			----------------------------------------------------------------------------------------
			<summary>
			Activates (brings back to the top) the splash screen (assuming it is already visible
			and the application showing it is the active application).
			</summary>
			----------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.ISplashScreen.Close">
			----------------------------------------------------------------------------------------
			<summary>
			Closes the splash screen
			</summary>
			----------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.ISplashScreen.Refresh">
			----------------------------------------------------------------------------------------
			<summary>
			Refreshes the display of the splash screen
			</summary>
			----------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.ISplashScreen.ProdName">
			------------------------------------------------------------------------------------
			<summary>
			The product name which appears in the Name label on the splash screen
			</summary>
			<remarks>
			.Net clients should not set this. It will be ignored.
			</remarks>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.ISplashScreen.ProdVersion">
			------------------------------------------------------------------------------------
			<summary>
			The product version which appears in the App Version label on the splash screen
			</summary>
			<remarks>
			.Net clients should not set this. It will be ignored.
			</remarks>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.ISplashScreen.Copyright">
			------------------------------------------------------------------------------------
			<summary>
			The copyright info to display on the splash screen
			</summary>
			<remarks>
			.Net clients should not set this. It will be ignored.
			</remarks>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.ISplashScreen.Message">
			------------------------------------------------------------------------------------
			<summary>
			The message to display to indicate startup activity on the splash screen
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.ISplashScreen.StillAlive">
			------------------------------------------------------------------------------------
			<summary>
			Gets a value indicating whether or not the ISplashScreen's underlying form is
			still available (i.e. non null).
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="T:SilUtils.SplashScreen">
			----------------------------------------------------------------------------------------
			<summary>
			FW Splash Screen
			</summary>
			----------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SplashScreen.#ctor">
			------------------------------------------------------------------------------------
			<summary>
			Default Constructor for SplashScreen
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SplashScreen.#ctor(System.Boolean,SilUtils.VersionType)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SplashScreen.SilUtils#ISplashScreen#Show(System.Boolean,System.Boolean)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SplashScreen.SilUtils#ISplashScreen#Show">
			------------------------------------------------------------------------------------
			<summary>
			Shows the splash screen
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SplashScreen.InternalShow">
			------------------------------------------------------------------------------------
			<summary>
			Does the work of showing.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SplashScreen.SilUtils#ISplashScreen#ShowWithoutFade">
			------------------------------------------------------------------------------------
			<summary>
			Shows the splash screen
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SplashScreen.SilUtils#ISplashScreen#Activate">
			----------------------------------------------------------------------------------------
			<summary>
			Activates (brings back to the top) the splash screen (assuming it is already visible
			and the application showing it is the active application).
			</summary>
			----------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SplashScreen.SilUtils#ISplashScreen#Close">
			----------------------------------------------------------------------------------------
			<summary>
			Closes the splash screen
			</summary>
			----------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SplashScreen.SilUtils#ISplashScreen#Refresh">
			----------------------------------------------------------------------------------------
			<summary>
			Refreshes the display of the splash screen
			</summary>
			----------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SplashScreen.StartSplashScreen">
			------------------------------------------------------------------------------------
			<summary>
			Starts the splash screen.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SplashScreen.GetSplashScreenForm">
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.SplashScreen.SilUtils#ISplashScreen#StillAlive">
			------------------------------------------------------------------------------------
			<summary>
			Gets a value indicating whether or not the ISplashScreen's underlying form is
			still available (i.e. non null).
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.SplashScreen.SilUtils#ISplashScreen#Message">
			------------------------------------------------------------------------------------
			<summary>
			The message to display to indicate startup activity on the splash screen
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.SplashScreen.SilUtils#ISplashScreen#ProdName">
			------------------------------------------------------------------------------------
			<summary>
			The product name which appears in the Name label on the splash screen
			</summary>
			<remarks>
			.Net clients should not set this. It will be ignored. They should set the
			AssemblyTitle attribute in AssemblyInfo.cs of the executable.
			</remarks>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.SplashScreen.SilUtils#ISplashScreen#ProdVersion">
			------------------------------------------------------------------------------------
			<summary>
			The product version which appears in the App Version label on the splash screen
			</summary>
			<remarks>
			.Net clients should not set this. It will be ignored. They should set the
			AssemblyFileVersion attribute in AssemblyInfo.cs of the executable.
			</remarks>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.SplashScreen.SilUtils#ISplashScreen#Copyright">
			------------------------------------------------------------------------------------
			<summary>
			The copyright info which appears in the Copyright label on the splash screen
			</summary>
			<remarks>
			.Net clients should not set this. It will be ignored. They should set the
			AssemblyCopyrightAttribute attribute in AssemblyInfo.cs of the executable.
			</remarks>
			------------------------------------------------------------------------------------
		</member>
		<member name="T:SilUtils.Controls.SilPanel">
			----------------------------------------------------------------------------------------
			<summary>
			Encapsulates a simple panel whose border, by default is 3D if visual styles aren't
			enabled and is a single line (painted using visual styles) when visual styles are
			enabled.
			</summary>
			----------------------------------------------------------------------------------------
		</member>
		<member name="T:SilUtils.Controls.SilTextPanel">
			----------------------------------------------------------------------------------------
			<summary>
			Extends the panel control to support text, including text containing mnemonic
			specifiers.
			</summary>
			----------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Controls.SilTextPanel.#ctor">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Controls.SilTextPanel.ProcessMnemonic(System.Char)">
			------------------------------------------------------------------------------------
			<summary>
			Make sure the text in the header label acts like a normal label in that it
			responds to Alt+letter keys to send focus to the next control in the tab order.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Controls.SilTextPanel.CalculateTextRectangle">
			------------------------------------------------------------------------------------
			<summary>
			Calculates the rectangle of the text when there are child controls. This method
			assumes that controls to the right of the text should clip the text. However, if
			the controls are above and below the text, this method will probably screw up
			the text drawing.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Controls.SilTextPanel.OnControlAdded(System.Windows.Forms.ControlEventArgs)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Controls.SilTextPanel.OnControlRemoved(System.Windows.Forms.ControlEventArgs)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Controls.SilTextPanel.ChildControl_LocationChanged(System.Object,System.EventArgs)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Controls.SilTextPanel.ChildControl_Resize(System.Object,System.EventArgs)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Controls.SilTextPanel.OnResize(System.EventArgs)">
			------------------------------------------------------------------------------------
			<summary>
			Make sure to repaint when resizing.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Controls.SilTextPanel.OnPaint(System.Windows.Forms.PaintEventArgs)">
			------------------------------------------------------------------------------------
			<summary>
			Paint the text on the panel, if there is any.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.Controls.SilTextPanel.Text">
			 ------------------------------------------------------------------------------------
			<summary>
			Gets or sets the header label's text.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.Controls.SilTextPanel.MnemonicGeneratesClick">
			------------------------------------------------------------------------------------
			<summary>
			Gets or sets a value indicating whether or not the control process the keyboard
			mnemonic as a click (like a button) or passes control on to the next control in
			the tab order (like a label).
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.Controls.SilTextPanel.ControlReceivingFocusOnMnemonic">
			------------------------------------------------------------------------------------
			<summary>
			Gets or sets the control that receives focus when the label's text is contains a
			mnumonic specifier. When this value is null, then focus is given to the next
			control in the tab order.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.Controls.SilTextPanel.TextFormatFlags">
			------------------------------------------------------------------------------------
			<summary>
			Gets or sets the text format flags used to draw the header label's text.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.Controls.SilTextPanel.ClipTextForChildControls">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Controls.SilPanel.#ctor">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Controls.SilPanel.WndProc(System.Windows.Forms.Message@)">
			------------------------------------------------------------------------------------
			<summary>
			Catch the non client area paint message so we can paint a border around the
			explorer bar that isn't black.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Controls.SilPanel.OnClientSizeChanged(System.EventArgs)">
			------------------------------------------------------------------------------------
			<summary>
			After the panel has been resized, force the border to be repainted. I found that
			often, after resizing the panel at runtime (e.g. when it's docked inside a
			splitter panel and the splitter moved), the portion of the border that was newly
			repainted didn't show the overriden border color handled by the WndProc above.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Controls.SilPanel.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.Controls.SilPanel.DoubleBuffered">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.Controls.SilPanel.BorderStyle">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.Controls.SilPanel.BorderColor">
			------------------------------------------------------------------------------------
			<summary>
			Gets or sets the color of the border (only valid when border drawing is
			overridden).
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.Controls.SilPanel.PaintExplorerBarBackground">
			------------------------------------------------------------------------------------
			<summary>
			Gets or sets a value indicating whether or not the background of the panel will
			be painted using the visual style's explorer bar element.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="T:SilUtils.Controls.AutoHeightLabel">
			----------------------------------------------------------------------------------------
			<summary>
			This class extends the label control to provide 2 extra features. 1) Allows left and
			right margins to be set so when the label is docked, text can still be indented.
			2) Automatically adjusts the height of the label to accomodate all the text in the
			control. Then it can be added to a stacked group of controls in a flow layout panel
			and the controls below the label will automatically get pushed down as the label grows.
			</summary>
			----------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Controls.AutoHeightLabel.#ctor">
			------------------------------------------------------------------------------------
			<summary>
			Initializes a new instance of the <see cref="T:SilUtils.Controls.AutoHeightLabel"/> class.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Controls.AutoHeightLabel.AdjustHeight">
			------------------------------------------------------------------------------------
			<summary>
			Adjusts the height of the label to accomodate all the text within the current
			width of the control, less the left and right margins.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Controls.AutoHeightLabel.OnSizeChanged(System.EventArgs)">
			------------------------------------------------------------------------------------
			<summary>
			Raises the <see cref="E:System.Windows.Forms.Control.SizeChanged"/> event.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Controls.AutoHeightLabel.OnPaint(System.Windows.Forms.PaintEventArgs)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.Controls.AutoHeightLabel.Text">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.Controls.AutoHeightLabel.Font">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.Controls.AutoHeightLabel.Image">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.Controls.AutoHeightLabel.LeftMargin">
			------------------------------------------------------------------------------------
			<summary>
			Gets or sets the left margin in pixels.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.Controls.AutoHeightLabel.RightMargin">
			------------------------------------------------------------------------------------
			<summary>
			Gets or sets the right margin.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.Controls.AutoHeightLabel.TextsXOffset">
			------------------------------------------------------------------------------------
			<summary>
			Gets the X offset where the labels text will be drawn within the control's client
			area.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="T:SilUtils.Controls.AutoHeightCheckBox">
			----------------------------------------------------------------------------------------
			<summary>
			This class extends the checkbox control to automatically adjust the height to
			accomodate all the text in the control. Then it can be added to a stacked group of
			controls in a flow layout panel and the controls below will automatically get pushed
			down as the checkbox grows.
			</summary>
			----------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Controls.AutoHeightCheckBox.#ctor">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Controls.AutoHeightCheckBox.OnSizeChanged(System.EventArgs)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Controls.AutoHeightCheckBox.AdjustHeight">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.Controls.AutoHeightCheckBox.Text">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.Controls.AutoHeightCheckBox.Font">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="T:SilUtils.Controls.ShortcutKeysDropDown">
			----------------------------------------------------------------------------------------
			<summary>

			</summary>
			----------------------------------------------------------------------------------------
		</member>
		<member name="T:SilUtils.Controls.CustomDropDownComboBox">
			----------------------------------------------------------------------------------------
			<summary>

			</summary>
			----------------------------------------------------------------------------------------
		</member>
		<member name="F:SilUtils.Controls.CustomDropDownComboBox.components">
			<summary>
			Required designer variable.
			</summary>
		</member>
		<member name="M:SilUtils.Controls.CustomDropDownComboBox.Dispose(System.Boolean)">
			<summary>
			Clean up any resources being used.
			</summary>
			<param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		</member>
		<member name="M:SilUtils.Controls.CustomDropDownComboBox.InitializeComponent">
			<summary>
			Required method for Designer support - do not modify
			the contents of this method with the code editor.
			</summary>
		</member>
		<member name="M:SilUtils.Controls.CustomDropDownComboBox.#ctor">
			------------------------------------------------------------------------------------
			<summary>
			Initializes a new instance of the <see cref="T:SilUtils.Controls.CustomDropDownComboBox"/> class.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Controls.CustomDropDownComboBox.OnPopupClosed(System.Object,System.EventArgs)">
			------------------------------------------------------------------------------------
			<summary>
			Handles the VisibleChanged event of the m_popupCtrl control.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Controls.CustomDropDownComboBox.OnResize(System.EventArgs)">
			------------------------------------------------------------------------------------
			<summary>
			This will center the text box vertically within the control.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Controls.CustomDropDownComboBox.OnPaint(System.Windows.Forms.PaintEventArgs)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Controls.CustomDropDownComboBox.m_button_Paint(System.Object,System.Windows.Forms.PaintEventArgs)">
			------------------------------------------------------------------------------------
			<summary>
			Handles the painting the button.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Controls.CustomDropDownComboBox.PaintNonThemeButton(System.Drawing.Graphics,System.Windows.Forms.ButtonState)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Controls.CustomDropDownComboBox.m_button_MouseEnter(System.Object,System.EventArgs)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Controls.CustomDropDownComboBox.m_button_MouseLeave(System.Object,System.EventArgs)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Controls.CustomDropDownComboBox.m_button_MouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Controls.CustomDropDownComboBox.m_button_MouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			<param name="sender"></param>
			<param name="e"></param>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.Controls.CustomDropDownComboBox.Text">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.Controls.CustomDropDownComboBox.BackColor">
			------------------------------------------------------------------------------------
			<summary>
			Gets or sets the background color for the control.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.Controls.CustomDropDownComboBox.TextBox">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.Controls.CustomDropDownComboBox.AlignDropToLeft">
			------------------------------------------------------------------------------------
			<summary>
			Gets a value indicating whether or not the left edge of the drop-down is aligned
			with the left edge of the combo control. To align the left edges, set this value
			to true. To align the right edge of the drop-down, set this value to false.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.Controls.CustomDropDownComboBox.PopupCtrl">
			------------------------------------------------------------------------------------
			<summary>
			Gets or sets the popup Control.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Controls.ShortcutKeysDropDown.#ctor">
			------------------------------------------------------------------------------------
			<summary>
			Initializes a new instance of the <see cref="T:SilUtils.Controls.ShortcutKeysDropDown"/> class.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Controls.ShortcutKeysDropDown.OnPopupClosed(System.Object,System.EventArgs)">
			------------------------------------------------------------------------------------
			<summary>
			Handles the shortcut keys drop down closed.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Controls.ShortcutKeysDropDown.SetCurrentKeysFromEditor">
			------------------------------------------------------------------------------------
			<summary>
			Sets the current keys.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Controls.ShortcutKeysDropDown.TextBox_KeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
			------------------------------------------------------------------------------------
			<summary>
			Clears the shortcut keys when the user presses backspace or delete in the text
			box.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.Controls.ShortcutKeysDropDown.ShortcutKeys">
			------------------------------------------------------------------------------------
			<summary>
			Gets or sets the shortcut keys.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.Controls.ShortcutKeysDropDown.ShortcutKeysAsString">
			------------------------------------------------------------------------------------
			<summary>
			Gets or sets the shortcut keys as string.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="T:SilUtils.IAboutDlg">
			----------------------------------------------------------------------------------------
			<summary>
			Public interface (exported with COM wrapper) for the FW Help About dialog box
			</summary>
			----------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.IAboutDlg.ShowDialog">
			-----------------------------------------------------------------------------------
			<summary>
			Shows the form as a modal dialog with the currently active form as its owner
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.IAboutDlg.Build">
			------------------------------------------------------------------------------------
			<summary>
			The build description which appears in the Build label on the about dialog box
			</summary>
			<remarks>
			.Net clients should not set this. It will be ignored.
			</remarks>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.IAboutDlg.IsBetaVersion">
			------------------------------------------------------------------------------------
			<summary>
			Sets a flag indicating whether or not the text "Beta" should follow the version no.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.IAboutDlg.ProdName">
			------------------------------------------------------------------------------------
			<summary>
			The product name which appears in the Name label on the about dialog box
			</summary>
			<remarks>
			.Net clients should not set this. It will be ignored.
			</remarks>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.IAboutDlg.ProdVersion">
			------------------------------------------------------------------------------------
			<summary>
			The product version which appears in the App Version label on the about dialog box
			</summary>
			<remarks>
			.Net clients should not set this. It will be ignored.
			</remarks>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.IAboutDlg.Copyright">
			------------------------------------------------------------------------------------
			<summary>
			The copyright info which appears in the Copyright label on the splash screen
			</summary>
			<remarks>
			.Net clients should not set this. It will be ignored.
			</remarks>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.IAboutDlg.DriveLetter">
			------------------------------------------------------------------------------------
			<summary>
			The drive letter whose free space will be reported in the About box.
			</summary>
			<remarks>
			.Net clients should not set this. It will be ignored.
			</remarks>
			------------------------------------------------------------------------------------
		</member>
		<member name="T:SilUtils.AboutDlg">
			----------------------------------------------------------------------------------------
			<summary>
			FW Help about dialog (previously HelpAboutDlg in AfDialog.cpp)
			</summary>
			<remarks>
			This dialog shows the registration key from HKLM\Software\SIL\FieldWorks\FwUserReg.
			If a DropDeadDate is to something different then 1/1/3000 it also displays the date
			after which the program is no longer working.
			</remarks>
			----------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.AboutDlg.#ctor">
			----------------------------------------------------------------------------------------
			<summary>
			Constructor
			</summary>
			----------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.AboutDlg.#ctor(System.Boolean,System.Boolean)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.AboutDlg.Dispose(System.Boolean)">
			----------------------------------------------------------------------------------------
			<summary>
			Clean up any resources being used.
			</summary>
			----------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.AboutDlg.InitializeComponent">
			<summary>
			Required method for Designer support - do not modify
			the contents of this method with the code editor.
			</summary>
		</member>
		<member name="M:SilUtils.AboutDlg.Initialize">
			------------------------------------------------------------------------------------
			<summary>
			Initialize the controls
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.AboutDlg.SetVersionInformation">
			------------------------------------------------------------------------------------
			<summary>
			Sets the application's version information.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.AboutDlg.InternalSetVersionNumber(System.String)">
			------------------------------------------------------------------------------------
			<summary>
			Sets the version number text on the about box.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.AboutDlg.InternalSetBuild(System.String)">
			------------------------------------------------------------------------------------
			<summary>
			Sets the build number (or date by default);
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.AboutDlg.SetCopyrightInformation">
			------------------------------------------------------------------------------------
			<summary>
			Sets the copyright information.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.AboutDlg.SetMemoryAndDiskInformation">
			------------------------------------------------------------------------------------
			<summary>
			Fills in the memory usage and disk space information.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.AboutDlg.SilUtils#IAboutDlg#ShowDialog">
			----------------------------------------------------------------------------------------
			<summary>
			Shows the form as a modal dialog with the currently active form as its owner
			</summary>
			----------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.AboutDlg.SilUtils#IAboutDlg#Build">
			------------------------------------------------------------------------------------
			<summary>
			The build date which appears in the Build label on the about dialog box
			</summary>
			<remarks>
			.Net clients should not set this. It will be ignored.
			</remarks>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.AboutDlg.SilUtils#IAboutDlg#IsBetaVersion">
			------------------------------------------------------------------------------------
			<summary>
			Indicates whether or not the term "Beta" should follow the version number.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.AboutDlg.SilUtils#IAboutDlg#ProdName">
			------------------------------------------------------------------------------------
			<summary>
			The product name which appears in the Name label on the about dialog box
			</summary>
			<remarks>
			.Net clients should not set this. It will be ignored.
			</remarks>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.AboutDlg.SilUtils#IAboutDlg#ProdVersion">
			------------------------------------------------------------------------------------
			<summary>
			The product version which appears in the App Version label on the about dialog box
			</summary>
			<remarks>
			.Net clients should not set this. It will be ignored.
			</remarks>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.AboutDlg.SilUtils#IAboutDlg#Copyright">
			------------------------------------------------------------------------------------
			<summary>
			The copyright info which appears in the Copyright label on the about dialog box
			</summary>
			<remarks>
			.Net clients should not set this. It will be ignored.
			</remarks>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.AboutDlg.SilUtils#IAboutDlg#DriveLetter">
			------------------------------------------------------------------------------------
			<summary>
			The drive letter whose free space will be reported in the About box.
			</summary>
			<remarks>
			.Net clients should not set this. It will be ignored.
			</remarks>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.ColorHelper.CalculateColor(System.Drawing.Color,System.Drawing.Color,System.Int32)">
			-------------------------------------------------------------------------------------
			 <summary>
			 Calculates a color by applying the specified alpha value to the specified front
			 color, assuming the color behind the front color is the specified back color. The
			 returned color has the alpha channel set to completely opaque, but whose alpha
			 channel value appears to be the one specified.
			 </summary>
			-------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.ColorHelper.MakeDisabledImage(System.Drawing.Image,System.Drawing.Color)">
			------------------------------------------------------------------------------------
			<summary>
			Takes and image and converts it to a disabled-looking image.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.ColorHelper.LightHighlight">
			------------------------------------------------------------------------------------
			<summary>
			Returns a lightened up version of the system's hightlight color.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.ColorHelper.LightLightHighlight">
			------------------------------------------------------------------------------------
			<summary>
			Returns a very lightened up version of the system's hightlight color.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="T:SilUtils.SilButtonColumn">
			----------------------------------------------------------------------------------------
			<summary>

			</summary>
			----------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilButtonColumn.#ctor">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilButtonColumn.#ctor(System.String)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilButtonColumn.#ctor(System.String,System.Boolean)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilButtonColumn.OnDataGridViewChanged">
			------------------------------------------------------------------------------------
			<summary>
			Need to save the value of the owning grid's ShowCellToolTips value because we may
			change it once in a while.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilButtonColumn.ShowToolTip">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilButtonColumn.HideToolTip">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilButtonColumn.InvokeButtonClick(System.Windows.Forms.DataGridViewCellMouseEventArgs)">
			------------------------------------------------------------------------------------
			<summary>
			Provides a way for an owned cell to fire the button clicked event on the column.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.SilButtonColumn.CellTemplate">
			------------------------------------------------------------------------------------
			<summary>
			Make sure the template is always a radion button cell.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.SilButtonColumn.ButtonText">
			------------------------------------------------------------------------------------
			<summary>
			Gets or sets the text of the button cells in this column.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.SilButtonColumn.ButtonFont">
			------------------------------------------------------------------------------------
			<summary>
			Gets or sets the text of the button cells in this column.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.SilButtonColumn.ButtonWidth">
			------------------------------------------------------------------------------------
			<summary>
			Gets or sets the width of the button within the column's cells.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.SilButtonColumn.UseComboButtonStyle">
			------------------------------------------------------------------------------------
			<summary>
			Gets or sets a value indicating whether or not to paint a combo box style button
			in the column's owned cells. If false, a push button style is drawn.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.SilButtonColumn.DrawDefaultComboButtonWidth">
			------------------------------------------------------------------------------------
			<summary>
			Gets or sets a value indicating whether or not the combo button's width is
			calculated automatically by the system (based on the theme). This value is only
			relevant when UseComboButtonStyle is true and visual styles in the OS are
			turned on.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.SilButtonColumn.ShowButton">
			------------------------------------------------------------------------------------
			<summary>
			Gets or sets a value indicating whether or not to show the button.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.SilButtonColumn.DrawTextWithEllipsisPath">
			------------------------------------------------------------------------------------
			<summary>
			Gets or sets a value indicating whether or not text in the button cells in the
			column will be drawn using ellipsis path string formatting.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.SilButtonColumn.ButtonToolTip">
			------------------------------------------------------------------------------------
			<summary>
			Gets or sets the tooltip text for the buttons in the button cells in this column.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="T:SilUtils.SilButtonCell">
			----------------------------------------------------------------------------------------
			<summary>

			</summary>
			----------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilButtonCell.IsPointOverButton(System.Drawing.Point,System.Boolean)">
			------------------------------------------------------------------------------------
			<summary>
			Gets a value indicating whether or not the specified point is over the cell's
			radio button. The relativeToCell flag is true when the specified point's origin
			is relative to the upper right corner of the cell. When false, it's assumed the
			point's origin is relative to the cell's owning grid control.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilButtonCell.OnMouseLeave(System.Int32)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilButtonCell.OnMouseMove(System.Windows.Forms.DataGridViewCellMouseEventArgs)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilButtonCell.OnMouseDown(System.Windows.Forms.DataGridViewCellMouseEventArgs)">
			------------------------------------------------------------------------------------
			<summary>
			Monitor when the mouse button goes down over the button.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilButtonCell.OnMouseUp(System.Windows.Forms.DataGridViewCellMouseEventArgs)">
			------------------------------------------------------------------------------------
			<summary>
			Monitor when the user releases the mouse button.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilButtonCell.OnMouseClick(System.Windows.Forms.DataGridViewCellMouseEventArgs)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilButtonCell.ManageButtonToolTip">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilButtonCell.Paint(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Int32,System.Windows.Forms.DataGridViewElementStates,System.Object,System.Object,System.String,System.Windows.Forms.DataGridViewCellStyle,System.Windows.Forms.DataGridViewAdvancedBorderStyle,System.Windows.Forms.DataGridViewPaintParts)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilButtonCell.DrawButton(System.Drawing.Graphics,System.Drawing.Rectangle)">
			------------------------------------------------------------------------------------
			<summary>
			Draws the button in the cell.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilButtonCell.DrawCellText(System.Drawing.IDeviceContext,System.String,System.Windows.Forms.DataGridViewCellStyle,System.Drawing.Rectangle)">
			------------------------------------------------------------------------------------
			<summary>
			Draws the cell's text.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilButtonCell.GetVisualStylePushButton">
			------------------------------------------------------------------------------------
			<summary>
			Gets the correct visual style push button given the state of the cell.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilButtonCell.GetVisualStyleComboButton">
			------------------------------------------------------------------------------------
			<summary>
			Gets the correct visual style combo button given the state of the cell.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilButtonCell.GetRectangles(System.Drawing.Rectangle,System.Drawing.Rectangle@,System.Drawing.Rectangle@)">
			------------------------------------------------------------------------------------
			<summary>
			Gets the rectangle for the radio button and the text, given the specified cell
			bounds.
			</summary>
			<param name="bounds">The rectangle of the entire cell.</param>
			<param name="rcbtn">The returned rectangle for the button.</param>
			<param name="rcText">The returned rectangle for the text.</param>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.SilButtonCell.Enabled">
			------------------------------------------------------------------------------------
			<summary>
			Repaint the cell when it's enabled property changes.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.SilButtonCell.OwningButtonColumn">
			------------------------------------------------------------------------------------
			<summary>
			Gets the cell's owning SilButtonColumn.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.SilButtonCell.ShowButton">
			------------------------------------------------------------------------------------
			<summary>
			Gets a value indicating whether or not the cell's button should be shown.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="T:SilUtils.Controls.XButton">
			----------------------------------------------------------------------------------------
			<summary>

			</summary>
			----------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Controls.XButton.#ctor">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Controls.XButton.OnSystemColorsChanged(System.EventArgs)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Controls.XButton.OnMouseLeave(System.EventArgs)">
			------------------------------------------------------------------------------------
			<summary>
			Repaint the button when the mouse isn't over it.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Controls.XButton.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
			------------------------------------------------------------------------------------
			<summary>
			Change appearance when mouse is pressed.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Controls.XButton.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
			------------------------------------------------------------------------------------
			<summary>
			Change appearance when the mouse button is released.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Controls.XButton.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
			------------------------------------------------------------------------------------
			<summary>
			Track when the mouse leaves the control when a mouse button is pressed.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Controls.XButton.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Controls.XButton.OnPaint(System.Windows.Forms.PaintEventArgs)">
			------------------------------------------------------------------------------------
			<summary>
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Controls.XButton.DrawText(System.Windows.Forms.PaintEventArgs)">
			------------------------------------------------------------------------------------
			<summary>
			Draws the button's text.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Controls.XButton.DrawWithX(System.Windows.Forms.PaintEventArgs)">
			------------------------------------------------------------------------------------
			<summary>
			Draw the button with text.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Controls.XButton.DrawWithImage(System.Windows.Forms.PaintEventArgs)">
			------------------------------------------------------------------------------------
			<summary>
			Draws the button with an image.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Controls.XButton.DrawArrow(System.Windows.Forms.PaintEventArgs)">
			------------------------------------------------------------------------------------
			<summary>
			Draws the button with an image.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Controls.XButton.GetCorrectVisualStyleArrowElement">
			------------------------------------------------------------------------------------
			<summary>
			Gets the correct visual style arrow button and in the correct state.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.Controls.XButton.CanBeChecked">
			------------------------------------------------------------------------------------
			<summary>
			Gets or sets a value indicating whether or not the button's checked state changes
			when clicked.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.Controls.XButton.Checked">
			------------------------------------------------------------------------------------
			<summary>
			Gets or sets a value indicating whether or not the button is checked.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.Controls.XButton.DrawEmpty">
			------------------------------------------------------------------------------------
			<summary>
			Gets or sets a value indicating whether or not an X is drawn on the button when no
			image, text or arrow direction is specified. By default, when no image, text or
			arrow direction is specified, the button is drawn with an X (like a close window-
			type of X). However, when DrawEmtpy is true, nothing will be drawn except the
			highlighted look given when the mouse is over or down or when the button is checked.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.Controls.XButton.Image">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.Controls.XButton.DrawLeftArrowButton">
			------------------------------------------------------------------------------------
			<summary>
			Gets or sets a value indicating whether or not the button should be drawn with a
			left pointing arrow (like the left button of a horizontal scrollbar).
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.Controls.XButton.DrawRightArrowButton">
			------------------------------------------------------------------------------------
			<summary>
			Gets or sets a value indicating whether or not the button should be drawn with a
			right pointing arrow (like the right button of a horizontal scrollbar).
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="T:SilUtils.Controls.ShortcutKeysEditor">
			----------------------------------------------------------------------------------------
			<summary>

			</summary>
			----------------------------------------------------------------------------------------
		</member>
		<member name="T:SilUtils.Controls.SilPopup">
			----------------------------------------------------------------------------------------
			<summary>

			</summary>
			----------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Controls.SilPopup.#ctor">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Controls.SilPopup.Dispose(System.Boolean)">
			------------------------------------------------------------------------------------
			<summary>
			Clean up any resources being used.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Controls.SilPopup.m_owningDropDown_Closed(System.Object,System.Windows.Forms.ToolStripDropDownClosedEventArgs)">
			------------------------------------------------------------------------------------
			<summary>
			Handles the Closed event of the m_owningDropDown control.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Controls.SilPopup.m_owningDropDown_Opened(System.Object,System.EventArgs)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Controls.SilPopup.OnDropDownClosing(System.Object,System.Windows.Forms.ToolStripDropDownClosingEventArgs)">
			------------------------------------------------------------------------------------
			<summary>
			Handles the Closing event of the m_owningDropDown control.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Controls.SilPopup.m_owningDropDown_VisibleChanged(System.Object,System.EventArgs)">
			------------------------------------------------------------------------------------
			<summary>
			Start and stop the timer when the owning drop-down's visibility changes.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Controls.SilPopup.OnSizeChanged(System.EventArgs)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Controls.SilPopup.Show(System.Drawing.Point)">
			------------------------------------------------------------------------------------
			<summary>
			Shows the popup at the specified screen location.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Controls.SilPopup.Show(System.Windows.Forms.Control,System.Drawing.Point)">
			------------------------------------------------------------------------------------
			<summary>
			Shows the popup at the specified location (which is relative to ctrl) with the
			specified owning control.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Controls.SilPopup.Hide">
			------------------------------------------------------------------------------------
			<summary>
			Hides the popup.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Controls.SilPopup.InitializeTimer">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Controls.SilPopup.m_timer_Tick(System.Object,System.EventArgs)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Controls.SilPopup.OnTimerTick">
			------------------------------------------------------------------------------------
			<summary>
			Fires when the timer Tick event occurs.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Controls.SilPopup.OnMouseEntered(System.EventArgs)">
			------------------------------------------------------------------------------------
			<summary>
			Fires the mouse entered event.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Controls.SilPopup.OnMouseLeft(System.EventArgs)">
			------------------------------------------------------------------------------------
			<summary>
			Fires the MouseLeft event.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Controls.SilPopup.PaintBodyBackground(System.Drawing.Graphics)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Controls.SilPopup.PaintHeadingBackground(System.Drawing.Graphics,System.Drawing.Rectangle)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Controls.SilPopup.PaintArrow(System.Drawing.Graphics,System.Int32,System.Drawing.Rectangle)">
			------------------------------------------------------------------------------------
			<summary>
			Draws an arrow whose tip is at the specified Y location (or centered in the
			heading) and points to the left.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Controls.SilPopup.PaintArrow(System.Drawing.Graphics,System.Int32,System.Drawing.Rectangle,System.Boolean)">
			------------------------------------------------------------------------------------
			<summary>
			Draws an arrow whose tip is at the specified Y location (or centered in the
			heading).
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Controls.SilPopup.CheckDesiredPopupLocation(System.Drawing.Point,System.Boolean@,System.Boolean@)">
			------------------------------------------------------------------------------------
			<summary>
			Determines whether or not the popup's right or bottom edge will extend beyond the
			bounds of the screen if shown at the specified location.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="F:SilUtils.Controls.SilPopup.components">
			<summary>
			Required designer variable.
			</summary>
		</member>
		<member name="M:SilUtils.Controls.SilPopup.InitializeComponent">
			<summary>
			Required method for Designer support - do not modify
			the contents of this method with the code editor.
			</summary>
		</member>
		<member name="P:SilUtils.Controls.SilPopup.IsMouseOver">
			------------------------------------------------------------------------------------
			<summary>
			Gets a value indicating whether or not the mouse is over the panel or any
			controls in its control collection.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.Controls.SilPopup.OwningDropDown">
			------------------------------------------------------------------------------------
			<summary>
			Gets the owning drop-down control.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.Controls.SilPopup.MonitorMouseOver">
			------------------------------------------------------------------------------------
			<summary>
			Gets or sets a value indicating whether or not the panel should keep track of
			when the mouse is over it or any controls contained therein.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Controls.ShortcutKeysEditor.#ctor">
			------------------------------------------------------------------------------------
			<summary>
			Initializes a new instance of the <see cref="T:SilUtils.Controls.ShortcutKeysEditor"/> class.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Controls.ShortcutKeysEditor.btnOK_Click(System.Object,System.EventArgs)">
			------------------------------------------------------------------------------------
			<summary>
			Handles the Click event of the btnOK control.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Controls.ShortcutKeysEditor.btnReset_Click(System.Object,System.EventArgs)">
			------------------------------------------------------------------------------------
			<summary>
			Handles the Click event of the btnReset control.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Controls.ShortcutKeysEditor.Reset">
			------------------------------------------------------------------------------------
			<summary>
			Resets the contents of the control.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Controls.ShortcutKeysEditor.KeysFromString(System.String)">
			------------------------------------------------------------------------------------
			<summary>
			Convert the specified Keys value to a string representation.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Controls.ShortcutKeysEditor.KeysToString(System.Windows.Forms.Keys)">
			------------------------------------------------------------------------------------
			<summary>
			Convert the specified Keys value to a string representation.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Controls.ShortcutKeysEditor.GetStringFromNonModifierKeys(System.Windows.Forms.Keys)">
			------------------------------------------------------------------------------------
			<summary>
			For the values in the Keys enumeration that represent the number keys (i.e. those
			across the top of the keyboard, Keyses the string.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Controls.ShortcutKeysEditor.GetNonModifierKeyFromString(System.String)">
			------------------------------------------------------------------------------------
			<summary>
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Controls.ShortcutKeysEditor.OnDropDownClosing(System.Object,System.Windows.Forms.ToolStripDropDownClosingEventArgs)">
			------------------------------------------------------------------------------------
			<summary>
			I found that when the combo box is dropped down and part of the drop-down window
			is below (i.e. outside) the bounds of this control, clicking the mouse anywhere
			in the combo's drop-down that is below the bounds of this control will make the
			this popup control get dismissed. Argh! Therefore, we'll cancel the closing when
			the mouse location is over the combo's drop-down.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Controls.ShortcutKeysEditor.HandleButtonDrawBackground(SilUtils.Controls.XButton,System.Windows.Forms.PaintEventArgs,SilUtils.PaintState)">
			------------------------------------------------------------------------------------
			<summary>
			Paints the background of the OK and Reset buttons.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="F:SilUtils.Controls.ShortcutKeysEditor.components">
			<summary>
			Required designer variable.
			</summary>
		</member>
		<member name="M:SilUtils.Controls.ShortcutKeysEditor.Dispose(System.Boolean)">
			<summary>
			Clean up any resources being used.
			</summary>
			<param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		</member>
		<member name="M:SilUtils.Controls.ShortcutKeysEditor.InitializeComponent">
			<summary>
			Required method for Designer support - do not modify
			the contents of this method with the code editor.
			</summary>
		</member>
		<member name="P:SilUtils.Controls.ShortcutKeysEditor.SelectedKeysAsString">
			------------------------------------------------------------------------------------
			<summary>
			Gets the the selected keys as a string or sets the selected keys from a string.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.Controls.ShortcutKeysEditor.SelectedKeys">
			------------------------------------------------------------------------------------
			<summary>
			Gets or sets the the selected keys.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="F:SilUtils.ExceptionViewer.components">
			<summary>
			Required designer variable.
			</summary>
		</member>
		<member name="M:SilUtils.ExceptionViewer.Dispose(System.Boolean)">
			<summary>
			Clean up any resources being used.
			</summary>
			<param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		</member>
		<member name="M:SilUtils.ExceptionViewer.InitializeComponent">
			<summary>
			Required method for Designer support - do not modify
			the contents of this method with the code editor.
			</summary>
		</member>
		<member name="T:SilUtils.FormSettings">
			----------------------------------------------------------------------------------------
			<summary>

			</summary>
			----------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.FormSettings.#ctor">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.FormSettings.Create(System.Windows.Forms.Form)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.FormSettings.InitializeForm(System.Windows.Forms.Form)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.FormSettings.HandleFormLocationChanged(System.Object,System.EventArgs)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.FormSettings.HandleFormResizeEnd(System.Object,System.EventArgs)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.FormSettings.HandleFormHandleDestroyed(System.Object,System.EventArgs)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.FormSettings.Bounds">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SmallFadingWnd.#ctor">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SmallFadingWnd.#ctor(System.String)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SmallFadingWnd.CloseFade">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="F:SilUtils.SmallFadingWnd.components">
			<summary>
			Required designer variable.
			</summary>
		</member>
		<member name="M:SilUtils.SmallFadingWnd.Dispose(System.Boolean)">
			<summary>
			Clean up any resources being used.
			</summary>
			<param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		</member>
		<member name="M:SilUtils.SmallFadingWnd.InitializeComponent">
			<summary>
			Required method for Designer support - do not modify
			the contents of this method with the code editor.
			</summary>
		</member>
		<member name="P:SilUtils.SmallFadingWnd.Message">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.SmallFadingWnd.ShowWithoutActivation">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Controls.HeaderLabel.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
			------------------------------------------------------------------------------------
			<summary>
			Draw a background that looks like a list view header.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.Controls.HeaderLabel.ShowWindowBackgroudOnTopAndRightEdge">
			------------------------------------------------------------------------------------
			<summary>
			Gets or sets a value indicating whether or not a one pixel line on the top and
			right edge of the panel is painted the window background color. This is they
			way a list view header is drawn... believe it or not.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="T:SilUtils.SettingsHandler">
			----------------------------------------------------------------------------------------
			<summary>
			Read and Write settings file
			</summary>
			----------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SettingsHandler.#ctor(System.String)">
			--------------------------------------------------------------------------------
			<summary>
			SettingsHandler class constructor
			</summary>
			<param name="settingsFile"></param>
			--------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SettingsHandler.CreateNewSettingsFile">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SettingsHandler.SaveFormProperties(System.Windows.Forms.Form)">
			------------------------------------------------------------------------------------
			<summary>
			Saves window properties from a form to an XmlDocument.
			</summary>
			<param name="frm">Form to save settings from</param>
			<returns>True on success</returns>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SettingsHandler.SaveFormProperties(System.Windows.Forms.Form,System.Boolean)">
			------------------------------------------------------------------------------------
			<summary>
			Saves window properties from a form to an XmlDocument.
			</summary>
			<param name="frm">Form to save settings from</param>
			<param name="saveEvenIfFormInvisible"></param>
			<returns>True on success</returns>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SettingsHandler.LoadFormProperties(System.Windows.Forms.Form)">
			------------------------------------------------------------------------------------
			<summary>
			Assigns window properties to a form from an XmlDocument.
			</summary>
			<param name="frm">Form to load settings into</param>
			<returns>True on success</returns>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SettingsHandler.LoadFormProperties(System.Windows.Forms.Form,System.Boolean)">
			------------------------------------------------------------------------------------
			<summary>
			Assigns window properties to a form from an XmlDocument.
			</summary>
			<param name="frm">Form to load settings into</param>
			<param name="setLocationOnly">true if the method should only set the form's
			location and not its size. Otherwise, false.</param>
			<returns>True on success</returns>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SettingsHandler.LoadFormProperties(System.Windows.Forms.Form,System.Boolean,System.Boolean)">
			------------------------------------------------------------------------------------
			<summary>
			Assigns window properties to a form from an XmlDocument.
			</summary>
			<param name="frm">Form to load settings into</param>
			<param name="setLocationOnly">true if the method should only set the form's
			location and not its size. Otherwise, false.</param>
			<param name="centerByDefault">true if the form should be centered in the
			screen when there are no saved properties for it.</param>
			<returns>True on success</returns>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SettingsHandler.SaveGridProperties(System.Windows.Forms.DataGridView)">
			------------------------------------------------------------------------------------
			<summary>
			Saves properties of the specified grid.
			</summary>
			<param name="grid">Grid for which settings are being saved</param>
			<returns>True on success</returns>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SettingsHandler.SaveGridProperties(System.Windows.Forms.DataGridView,System.String)">
			------------------------------------------------------------------------------------
			<summary>
			Saves properties of the specified grid.
			</summary>
			<param name="grid">Grid for which settings are being saved</param>
			<param name="gridLinesValue"></param>
			<returns>True on success</returns>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SettingsHandler.LoadGridProperties(System.Windows.Forms.DataGridView)">
			------------------------------------------------------------------------------------
			<summary>
			Assigns properties to the specified grid.
			</summary>
			<param name="grid">Grid for whose settings are being loaded</param>
			<returns>True on success</returns>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SettingsHandler.LoadGridProperties(System.Windows.Forms.DataGridView,System.String@)">
			------------------------------------------------------------------------------------
			<summary>
			Assigns properties to the specified grid.
			</summary>
			<param name="grid">Grid for whose settings are being loaded</param>
			<param name="gridLinesValue">string value corresponding to the type of grid
			lines read from the settings file for the specified grid</param>
			<returns>True on success</returns>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SettingsHandler.GetIntSettingsValue(System.String,System.String,System.Int32)">
			------------------------------------------------------------------------------------
			<summary>
			Gets an integer value from the settings file.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SettingsHandler.GetFloatSettingsValue(System.String,System.String,System.Single)">
			------------------------------------------------------------------------------------
			<summary>
			Gets an float value from the settings file.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SettingsHandler.GetStringSettingsValue(System.String,System.String,System.String)">
			------------------------------------------------------------------------------------
			<summary>
			Gets a string value from the settings file.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SettingsHandler.GetBoolSettingsValue(System.String,System.String,System.Boolean)">
			------------------------------------------------------------------------------------
			<summary>
			Gets a boolean value from the settings file.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SettingsHandler.GetColorSettingsValue(System.String,System.String,System.Drawing.Color)">
			------------------------------------------------------------------------------------
			<summary>
			Gets a 8 digit hex string from the settings file and converts it to an ARGB value
			in order to return a color.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SettingsHandler.GetColorSettingsValue(System.String,System.String,System.UInt32)">
			------------------------------------------------------------------------------------
			<summary>
			Gets a 8 digit hex string from the settings file and converts it to an ARGB value
			in order to return a color.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SettingsHandler.SaveSettingsValue(System.String,System.String,System.Object)">
			------------------------------------------------------------------------------------
			<summary>
			Saves a value to the settings file for the specified window.
			</summary>
			<param name="settingName">Name of setting.</param>
			<param name="property">Name of the item being saved (this is used for the
			attribute name in the XML node). For example: "splitter1Location"</param>
			<param name="value">value being saved.</param>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SettingsHandler.SaveValue(System.String,System.String,System.String,System.String,System.Object)">
			------------------------------------------------------------------------------------
			<summary>
			Saves a value to the settings file for the specified window.
			</summary>
			<param name="xPath">xpath of settings block (e.g. "windowstates")</param>
			<param name="elementName">name of subelements within the specified xPath
			(e.g. window).</param>
			<param name="id">Unique id of settings record (e.g. window name).</param>
			<param name="property">Name of the item being saved (this is used for the
			attribute name in the XML node). For example: "splitter1Location"</param>
			<param name="value">value being saved.</param>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SettingsHandler.GetValue(System.String,System.String,System.String)">
			------------------------------------------------------------------------------------
			<summary>
			Utility method for the GetStringSettingsValue, GetIntSettingsValue and
			GetBoolSettingsValue methods.
			</summary>
			<param name="xPath">xpath of settings block (e.g. "windowstates")</param>
			<param name="id">Unique id of settings record (e.g. window name).</param>
			<param name="property">Name of the item whose value to retrieve (this is used for
			the attribute name in the XML node). For example: "splitter1Location"</param>
			<returns></returns>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SettingsHandler.GetFloatValue(System.String,System.String,System.String,System.Single)">
			------------------------------------------------------------------------------------
			<summary>
			Gets an float value from the settings file.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SettingsHandler.GetIntValue(System.String,System.String,System.String,System.Int32)">
			------------------------------------------------------------------------------------
			<summary>
			Gets an integer value from the settings file.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SettingsHandler.GetStringValue(System.String,System.String,System.String,System.String)">
			------------------------------------------------------------------------------------
			<summary>
			Gets a string value from the settings file.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SettingsHandler.GetBoolValue(System.String,System.String,System.String,System.Boolean)">
			------------------------------------------------------------------------------------
			<summary>
			Gets a boolean value from the settings file.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SettingsHandler.FindChildNode(System.String,System.String)">
			------------------------------------------------------------------------------------
			<summary>
			Finds the child node (of the parent node specified xpath) whose id attribute's
			value is equal to the one specified.
			</summary>
			<param name="xpath"></param>
			<param name="id"></param>
			<returns></returns>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SettingsHandler.FindChildNode(System.Xml.XmlNode,System.String)">
			------------------------------------------------------------------------------------
			<summary>
			Finds the child node (of the specified parent node) whose id attribute's value
			is equal to the one specified.
			</summary>
			<param name="parentNode"></param>
			<param name="id"></param>
			<returns></returns>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SettingsHandler.RemoveChildNode(System.Xml.XmlNode,System.String)">
			------------------------------------------------------------------------------------
			<summary>
			Removes the child node (of the specified parent node) whose id attribute's value
			is equal to the one specified.
			</summary>
			<param name="parentNode"></param>
			<param name="id"></param>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SettingsHandler.SetStringValue(System.String,System.String,System.String)">
			------------------------------------------------------------------------------------
			<summary>
			Only works if xpath is unique
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SettingsHandler.SetIntValue(System.String,System.String,System.Int32)">
			------------------------------------------------------------------------------------
			<summary>
			Sets an integer value to the settings file.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SettingsHandler.SetFloatValue(System.String,System.String,System.Single)">
			------------------------------------------------------------------------------------
			<summary>
			Sets an integer value to the settings file.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SettingsHandler.VerifyNodeExists(System.String)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.SettingsHandler.LastProject">
			------------------------------------------------------------------------------------
			<summary>
			Gets or sets the last database loaded.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="T:SilUtils.NoActivateWnd">
			----------------------------------------------------------------------------------------
			<summary>
			This form doesn't steal focus when it gets shown.
			</summary>
			----------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.NoActivateWnd.Show">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.NoActivateWnd.Show(System.Drawing.Point,System.Drawing.Size)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.NoActivateWnd.ShowWithoutActivation">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="T:SilUtils.GridSettings">
			----------------------------------------------------------------------------------------
			<summary>

			</summary>
			----------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.GridSettings.#ctor">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.GridSettings.Create(System.Windows.Forms.DataGridView)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.GridSettings.InitializeGrid(System.Windows.Forms.DataGridView)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="T:SilUtils.GridColumnSettings">
			----------------------------------------------------------------------------------------
			<summary>

			</summary>
			----------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.GridColumnSettings.#ctor">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="T:SilUtils.SilHierarchicalGridRow">
			----------------------------------------------------------------------------------------
			<summary>

			</summary>
			----------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilHierarchicalGridRow.#ctor">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilHierarchicalGridRow.#ctor(System.Windows.Forms.DataGridView)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilHierarchicalGridRow.#ctor(System.Windows.Forms.DataGridView,System.String)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilHierarchicalGridRow.#ctor(System.Windows.Forms.DataGridView,System.String,System.Drawing.Font)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilHierarchicalGridRow.#ctor(System.Windows.Forms.DataGridView,System.String,System.Int32)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilHierarchicalGridRow.#ctor(System.Windows.Forms.DataGridView,System.String,System.Drawing.Font,System.Int32)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilHierarchicalGridRow.#ctor(System.Windows.Forms.DataGridView,System.String,System.Drawing.Font,System.Int32,System.Int32)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilHierarchicalGridRow.Dispose(System.Boolean)">
			------------------------------------------------------------------------------------
			<summary>
			Clean up, like a good boy.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilHierarchicalGridRow.Clone">
			------------------------------------------------------------------------------------
			<summary>
			Creates an exact copy of the row.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilHierarchicalGridRow.SubscribeToOwningGridEvents">
			------------------------------------------------------------------------------------
			<summary>
			For some reason, on a Windows Vista machine, this should be called for each
			hierarchical row *after* all hierarchical rows are added to a grid, rather than
			as the rows are being added. That means this should not be called in the row's
			constructor or clone event. When it is, sometimes (and it appears to be random)
			the a hand-full of hierarchical rows never get the grid's RowPostPaint event.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilHierarchicalGridRow.UnsubscribeToOwningGridEvents">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilHierarchicalGridRow.GetCacheIndex(System.Int32)">
			------------------------------------------------------------------------------------
			<summary>
			Given an absolute row index of a row in the grid, this method will calculate what
			cache entry index the row corresponds to. It is assumed the row passed to this
			method comes after this row in the grid and before the next SilHierarchical row.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilHierarchicalGridRow.SetExpandedState(System.Boolean,System.Boolean)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilHierarchicalGridRow.SetExpandedState(System.Boolean,System.Boolean,System.Boolean)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilHierarchicalGridRow.IsRowOwned(System.Int32)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilHierarchicalGridRow.m_owningGrid_KeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
			------------------------------------------------------------------------------------
			<summary>
			Cause Alt+Right, + or = to expand collapsed groups and Alt+Left, - or _ to
			collapse expanded groups.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilHierarchicalGridRow.m_owningGrid_MouseClick(System.Object,System.Windows.Forms.MouseEventArgs)">
			------------------------------------------------------------------------------------
			<summary>
			Check if the + or - glyph was clicked upon.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilHierarchicalGridRow.m_owningGrid_CellDoubleClick(System.Object,System.Windows.Forms.DataGridViewCellEventArgs)">
			------------------------------------------------------------------------------------
			<summary>
			Toggle expansion when the user double-clicks on the row.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilHierarchicalGridRow.m_owningGrid_SizeChanged(System.Object,System.EventArgs)">
			------------------------------------------------------------------------------------
			<summary>
			When the owning grid was resized, redraw the row.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilHierarchicalGridRow.m_owningGrid_Scroll(System.Object,System.Windows.Forms.ScrollEventArgs)">
			------------------------------------------------------------------------------------
			<summary>
			When the user scrolled the grid horizontally, redraw the row.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilHierarchicalGridRow.m_owningGrid_RowPostPaint(System.Object,System.Windows.Forms.DataGridViewRowPostPaintEventArgs)">
			------------------------------------------------------------------------------------
			<summary>
			Draw the row ourselves.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilHierarchicalGridRow.DrawHighlight(System.Drawing.Graphics,System.Drawing.Rectangle@,System.Drawing.Rectangle@)">
			------------------------------------------------------------------------------------
			<summary>
			Draw the highlighted row in the proper color.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilHierarchicalGridRow.DrawText(System.Drawing.Graphics,System.Drawing.Rectangle@)">
			------------------------------------------------------------------------------------
			<summary>
			Draws the text in the row.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilHierarchicalGridRow.GetRectangles(System.Drawing.Rectangle,System.Drawing.Rectangle@,System.Drawing.Rectangle@)">
			------------------------------------------------------------------------------------
			<summary>
			Gets the rectangles for the selection and the text.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilHierarchicalGridRow.DrawGlyph(System.Drawing.Graphics)">
			------------------------------------------------------------------------------------
			<summary>
			Draws the + or - glyph.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilHierarchicalGridRow.Fill(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.DataGridView)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilHierarchicalGridRow.Fill(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.DataGridView,System.Boolean)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilHierarchicalGridRow.OwningGridsVerticalScrollBarVisible">
			------------------------------------------------------------------------------------
			<summary>
			Gets a value indicating whether or not the vertical scrollbar is visible.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.SilHierarchicalGridRow.Text">
			------------------------------------------------------------------------------------
			<summary>
			Gets or sets the row's text
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.SilHierarchicalGridRow.Font">
			------------------------------------------------------------------------------------
			<summary>
			Gets or sets the font used to draw the row's text.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.SilHierarchicalGridRow.Level">
			------------------------------------------------------------------------------------
			<summary>
			Gets or sets the hierarchical level of the row.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.SilHierarchicalGridRow.FirstCacheIndex">
			------------------------------------------------------------------------------------
			<summary>
			Gets or sets an index of a row in a cache corresponding to the first child row that
			is subordinate to this row.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.SilHierarchicalGridRow.LastCacheIndex">
			------------------------------------------------------------------------------------
			<summary>
			Gets or sets an index of a row in a cache corresponding to the last child row that
			is subordinate to this row.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.SilHierarchicalGridRow.ChildCount">
			------------------------------------------------------------------------------------
			<summary>
			Gets or sets the number of child items subordinate to the row.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.SilHierarchicalGridRow.CountFormatStrings">
			------------------------------------------------------------------------------------
			<summary>
			The format strings for displaying count information at the far right of the
			row. There must be three strings: a long version, medium version and a short
			version. The format strings in the string array are assumed to be in that order.
			When there is enough room, the long will always be used. An example of the three
			would be:

			Long: "({0} records)"
			Med.: "({0} rec.)"
			Short: "({0})"

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.SilHierarchicalGridRow.GlyphRectangle">
			------------------------------------------------------------------------------------
			<summary>
			Gets the rectangle for the + or - glyph in the row.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.SilHierarchicalGridRow.Expanded">
			------------------------------------------------------------------------------------
			<summary>
			Gets or sets a value indicating whether or not the row's child rows are visible.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="T:SilUtils.SilHierarchicalGridColumn">
			----------------------------------------------------------------------------------------
			<summary>

			</summary>
			----------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilHierarchicalGridColumn.#ctor">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilHierarchicalGridColumn.Clone">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilHierarchicalGridColumn.ShowHierarchicalColumns(System.Windows.Forms.DataGridView,System.Boolean,System.Boolean,System.Boolean)">
			------------------------------------------------------------------------------------
			<summary>
			Shows or Hides all the SilHierarchicalGridColumns in the specified grid,
			suspending the grid's layout beforehand, if specified to do so, and resuming the
			grid's layout afterward, if specified to do so.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.SilHierarchicalGridColumn.CellTemplate">
			------------------------------------------------------------------------------------
			<summary>
			Make sure the template is always a SilHierarchicalGridCell cell.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.SilHierarchicalGridColumn.Level">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="T:SilUtils.SilHierarchicalGridCell">
			----------------------------------------------------------------------------------------
			<summary>

			</summary>
			----------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilHierarchicalGridCell.Paint(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Int32,System.Windows.Forms.DataGridViewElementStates,System.Object,System.Object,System.String,System.Windows.Forms.DataGridViewCellStyle,System.Windows.Forms.DataGridViewAdvancedBorderStyle,System.Windows.Forms.DataGridViewPaintParts)">
			------------------------------------------------------------------------------------
			<summary>
			Don't allow the cell to have the selection color.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilHierarchicalGridCell.OnEnter(System.Int32,System.Boolean)">
			------------------------------------------------------------------------------------
			<summary>
			Don't let the cell become current.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilHierarchicalGridCell.AdjustCellBorderStyle(System.Windows.Forms.DataGridViewAdvancedBorderStyle,System.Windows.Forms.DataGridViewAdvancedBorderStyle,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
			------------------------------------------------------------------------------------
			<summary>
			Get rid of all borders except the bottom.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="T:SilUtils.Controls.SilGradientPanel">
			----------------------------------------------------------------------------------------
			<summary>
			Encapsulates a panel control whose background is a gradient fill like that of window
			caption bars (except, unlike a caption's gradient transition direction of left to
			right, the panel's transition direction is from bottom to top).
			</summary>
			----------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Controls.SilGradientPanel.#ctor">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Controls.SilGradientPanel.OnSystemColorsChanged(System.EventArgs)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Controls.SilGradientPanel.OnSizeChanged(System.EventArgs)">
			------------------------------------------------------------------------------------
			<summary>
			Force a repaint when the size changes.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Controls.SilGradientPanel.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.Controls.SilGradientPanel.MakeDark">
			------------------------------------------------------------------------------------
			<summary>
			Gets or sets a value indicating whether or not the gradient background should
			be dark.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.ReflectionHelper.LoadAssembly(System.String)">
			------------------------------------------------------------------------------------
			<summary>
			Loads a DLL.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.ReflectionHelper.CreateClassInstance(System.Reflection.Assembly,System.String)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.ReflectionHelper.CreateClassInstance(System.Reflection.Assembly,System.String,System.Object[])">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.ReflectionHelper.GetStrResult(System.Object,System.String,System.Object[])">
			------------------------------------------------------------------------------------
			<summary>
			Returns a string value returned from a call to a private method.
			</summary>
			<param name="binding">This is either the Type of the object on which the method
			is called or an instance of that type of object. When the method being called
			is static then binding should be a type.</param>
			<param name="methodName">Name of the method to call.</param>
			<param name="args">An array of arguments to pass to the method call.</param>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.ReflectionHelper.GetStrResult(System.Object,System.String,System.Object)">
			------------------------------------------------------------------------------------
			<summary>
			Returns a string value returned from a call to a private method.
			</summary>
			<param name="binding">This is either the Type of the object on which the method
			is called or an instance of that type of object. When the method being called
			is static then binding should be a type.</param>
			<param name="methodName">Name of the method to call.</param>
			<param name="args">An single arguments to pass to the method call.</param>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.ReflectionHelper.GetIntResult(System.Object,System.String,System.Object)">
			------------------------------------------------------------------------------------
			<summary>
			Returns a integer value returned from a call to a private method.
			</summary>
			<param name="binding">This is either the Type of the object on which the method
			is called or an instance of that type of object. When the method being called
			is static then binding should be a type.</param>
			<param name="methodName">Name of the method to call.</param>
			<param name="args">An single arguments to pass to the method call.</param>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.ReflectionHelper.GetIntResult(System.Object,System.String,System.Object[])">
			------------------------------------------------------------------------------------
			<summary>
			Returns a integer value returned from a call to a private method.
			</summary>
			<param name="binding">This is either the Type of the object on which the method
			is called or an instance of that type of object. When the method being called
			is static then binding should be a type.</param>
			<param name="methodName">Name of the method to call.</param>
			<param name="args">An array of arguments to pass to the method call.</param>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.ReflectionHelper.GetFloatResult(System.Object,System.String,System.Object)">
			------------------------------------------------------------------------------------
			<summary>
			Returns a float value returned from a call to a private method.
			</summary>
			<param name="binding">This is either the Type of the object on which the method
			is called or an instance of that type of object. When the method being called
			is static then binding should be a type.</param>
			<param name="methodName">Name of the method to call.</param>
			<param name="args">An single arguments to pass to the method call.</param>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.ReflectionHelper.GetFloatResult(System.Object,System.String,System.Object[])">
			------------------------------------------------------------------------------------
			<summary>
			Returns a float value returned from a call to a private method.
			</summary>
			<param name="binding">This is either the Type of the object on which the method
			is called or an instance of that type of object. When the method being called
			is static then binding should be a type.</param>
			<param name="methodName">Name of the method to call.</param>
			<param name="args">An array of arguments to pass to the method call.</param>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.ReflectionHelper.GetBoolResult(System.Object,System.String,System.Object)">
			------------------------------------------------------------------------------------
			<summary>
			Returns a boolean value returned from a call to a private method.
			</summary>
			<param name="binding">This is either the Type of the object on which the method
			is called or an instance of that type of object. When the method being called
			is static then binding should be a type.</param>
			<param name="methodName">Name of the method to call.</param>
			<param name="args">An single arguments to pass to the method call.</param>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.ReflectionHelper.GetBoolResult(System.Object,System.String,System.Object[])">
			------------------------------------------------------------------------------------
			<summary>
			Returns a boolean value returned from a call to a private method.
			</summary>
			<param name="binding">This is either the Type of the object on which the method
			is called or an instance of that type of object. When the method being called
			is static then binding should be a type.</param>
			<param name="methodName">Name of the method to call.</param>
			<param name="args">An array of arguments to pass to the method call.</param>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.ReflectionHelper.CallMethod(System.Object,System.String)">
			------------------------------------------------------------------------------------
			<summary>
			Calls a method specified on the specified binding.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.ReflectionHelper.CallMethod(System.Object,System.String,System.Object)">
			------------------------------------------------------------------------------------
			<summary>
			Calls a method specified on the specified binding.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.ReflectionHelper.CallMethod(System.Object,System.String,System.Object,System.Object)">
			------------------------------------------------------------------------------------
			<summary>
			Calls a method specified on the specified binding.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.ReflectionHelper.CallMethod(System.Object,System.String,System.Object,System.Object,System.Object)">
			------------------------------------------------------------------------------------
			<summary>
			Calls a method specified on the specified binding.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.ReflectionHelper.CallMethod(System.Object,System.String,System.Object,System.Object,System.Object,System.Object)">
			------------------------------------------------------------------------------------
			<summary>
			Calls a method specified on the specified binding.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.ReflectionHelper.CallMethod(System.Object,System.String,System.Object[])">
			------------------------------------------------------------------------------------
			<summary>
			Calls a method specified on the specified binding.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.ReflectionHelper.GetResult(System.Object,System.String,System.Object)">
			------------------------------------------------------------------------------------
			<summary>
			Returns the result of calling a method on the specified binding.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.ReflectionHelper.GetResult(System.Object,System.String,System.Object[])">
			------------------------------------------------------------------------------------
			<summary>
			Returns the result of calling a method on the specified binding.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.ReflectionHelper.SetProperty(System.Object,System.String,System.Object)">
			------------------------------------------------------------------------------------
			<summary>
			Sets the specified property on the specified binding.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.ReflectionHelper.SetField(System.Object,System.String,System.Object)">
			------------------------------------------------------------------------------------
			<summary>
			Sets the specified field (i.e. member variable) on the specified binding.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.ReflectionHelper.GetProperty(System.Object,System.String)">
			------------------------------------------------------------------------------------
			<summary>
			Gets the specified property on the specified binding.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.ReflectionHelper.GetField(System.Object,System.String)">
			------------------------------------------------------------------------------------
			<summary>
			Gets the specified field (i.e. member variable) on the specified binding.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.ReflectionHelper.Invoke(System.Object,System.String,System.Object[],System.Reflection.BindingFlags)">
			------------------------------------------------------------------------------------
			<summary>
			Sets the specified member variable or property (specified by name) on the
			specified binding.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.ReflectionHelper.CallMethodWithThrow(System.Object,System.String,System.Object[])">
			------------------------------------------------------------------------------------
			<summary>
			Calls a method specified on the specified binding, throwing any exceptions that
			may occur.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="F:SilUtils.OutlookBar.buttons">
			<summary>
			buttons contains the list of clickable OutlookBarButtons
			</summary>
		</member>
		<member name="F:SilUtils.OutlookBar.selectedButton">
			<summary>
			this variable remembers which button is currently selected
			</summary>
		</member>
		<member name="F:SilUtils.OutlookBar.hoveringButtonIndex">
			<summary>
			this variable remembers the button index over which the mouse is moving
			</summary>
		</member>
		<member name="F:SilUtils.OutlookBar.buttonHeight">
			<summary>
			property to set the buttonHeigt
			default is 30
			</summary>
		</member>
		<member name="M:SilUtils.OutlookBar.HitTest(System.Int32,System.Int32)">
			<summary>
			returns the button given the coordinates relative to the Outlookbar control
			</summary>
			<param name="x"></param>
			<param name="y"></param>
			<returns></returns>
		</member>
		<member name="M:SilUtils.OutlookBar.ButtonlistChanged">
			<summary>
			this function will setup the control to cope with changes in the buttonlist
			that is, addition and removal of buttons
			</summary>
		</member>
		<member name="M:SilUtils.OutlookBar.OnPaint(System.Windows.Forms.PaintEventArgs)">
			------------------------------------------------------------------------------------
			<summary>
			Raises the <see cref="E:System.Windows.Forms.Control.Paint"/> event.
			</summary>
			<param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs"/> that contains the event data.</param>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.OutlookBar.OutlookBar_Resize(System.Object,System.EventArgs)">
			<summary>
			isResizing is used as a signal, so this method is not called recusively
			this prevents a stack overflow
			</summary>
		</member>
		<member name="F:SilUtils.OutlookBar.components">
			<summary>
			Required designer variable.
			</summary>
		</member>
		<member name="M:SilUtils.OutlookBar.Dispose(System.Boolean)">
			<summary>
			Clean up any resources being used.
			</summary>
			<param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		</member>
		<member name="M:SilUtils.OutlookBar.InitializeComponent">
			<summary>
			Required method for Designer support - do not modify
			the contents of this method with the code editor.
			</summary>
		</member>
		<member name="P:SilUtils.OutlookBar.SelectedButton">
			<summary>
			when a button is selected programatically, it must update the control
			and repaint the buttons
			</summary>
		</member>
		<member name="P:SilUtils.OutlookBar.Buttons">
			<summary>
			readonly list of buttons
			</summary>
		</member>
		<member name="T:SilUtils.OutlookBar.OutlookBarButtons">
			<summary>
			the OutlookBarButtons class contains the list of buttons
			it manages adding and removing buttons, and updates the Outlookbar control
			respectively. Note that this is a class, not a control!
			</summary>
		</member>
		<member name="T:SilUtils.OutlookBarButton">
			<summary>
			OutlookbarButton represents a button on the Outlookbar
			this is an internally used class (not a control!)
			</summary>
		</member>
		<member name="M:SilUtils.OutlookBarButton.PaintButton(System.Drawing.Graphics,System.Int32,System.Int32,System.Boolean,System.Boolean)">
			<summary>
			the outlook button will paint itself on its container (the OutlookBar)
			</summary>
			<param name="graphics"></param>
			<param name="x"></param>
			<param name="y"></param>
			<param name="IsSelected"></param>
			<param name="IsHovering"></param>
		</member>
		<member name="T:SilUtils.PortableSettingsProvider">
			----------------------------------------------------------------------------------------
			<summary>
			This class is a settings provider that allows applications to specify in what file and
			where in a file system it's settings will be stored. It's good for portable apps.
			</summary>
			----------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.PortableSettingsProvider.#ctor">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.PortableSettingsProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
			------------------------------------------------------------------------------------
			<summary>
			Initializes the specified name.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.PortableSettingsProvider.GetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)">
			------------------------------------------------------------------------------------
			<summary>
			Gets a collection of property values.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.PortableSettingsProvider.GetValue(System.Configuration.SettingsProperty)">
			------------------------------------------------------------------------------------
			<summary>
			Gets from the XML the value for the specified property.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.PortableSettingsProvider.GetStringCollection(System.Configuration.SettingsPropertyValue,System.Xml.XmlNode)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.PortableSettingsProvider.GetFormSettings(System.Configuration.SettingsPropertyValue,System.Xml.XmlNode)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.PortableSettingsProvider.GetGridSettings(System.Configuration.SettingsPropertyValue,System.Xml.XmlNode)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.PortableSettingsProvider.SetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyValueCollection)">
			------------------------------------------------------------------------------------
			<summary>
			Sets the values for the specified properties and saves the XML file in which
			they're stored.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.PortableSettingsProvider.SetPropNodeValue(System.Xml.XmlNode,System.Configuration.SettingsPropertyValue)">
			------------------------------------------------------------------------------------
			<summary>
			Sets the value of a node to that found in the specified property. This method
			specially handles various types of properties (e.g. string collections).
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.PortableSettingsProvider.SetStringCollection(System.Configuration.SettingsPropertyValue,System.Xml.XmlNode)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.PortableSettingsProvider.SetFormSettings(System.Configuration.SettingsPropertyValue,System.Xml.XmlNode)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.PortableSettingsProvider.SetGridSettings(System.Configuration.SettingsPropertyValue,System.Xml.XmlNode)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.PortableSettingsProvider.GetStringFromIntArray(System.Int32[])">
			------------------------------------------------------------------------------------
			<summary>
			Gets a comma-delimited string from an array of integers.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.PortableSettingsProvider.GetIntArrayFromString(System.String)">
			------------------------------------------------------------------------------------
			<summary>
			Gets an int array from a comma-delimited string of numbers.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.PortableSettingsProvider.ApplicationName">
			------------------------------------------------------------------------------------
			<summary>
			Gets the name of the currently running application.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.PortableSettingsProvider.SettingsFilePath">
			------------------------------------------------------------------------------------
			<summary>
			Gets the path to the application's settings file. This path does not include the
			file name.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.PortableSettingsProvider.SettingsFilename">
			------------------------------------------------------------------------------------
			<summary>
			Gets only the name of the application settings file.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="T:SilUtils.MessageDispatcher">
			----------------------------------------------------------------------------------------
			<summary>

			</summary>
			----------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.MessageDispatcher.HasReceiver(System.Object)">
			------------------------------------------------------------------------------------
			<summary>
			Determines whether the specified receiver has been added to the dispatcher.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.MessageDispatcher.AddReceiver(System.Object)">
			------------------------------------------------------------------------------------
			<summary>
			Adds the specified receiver to the list of receivers to which messages
			 are dispatched.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.MessageDispatcher.RemoveReceiver(System.Object)">
			------------------------------------------------------------------------------------
			<summary>
			Removes the dispatch recipient.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.MessageDispatcher.HandleReceiverDisposed(System.Object,System.EventArgs)">
			------------------------------------------------------------------------------------
			<summary>
			Removes the disposing recipient.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.MessageDispatcher.SendMessage(System.String,System.Object,System.Object)">
			------------------------------------------------------------------------------------
			<summary>
			Sends a message. This overload will skip dispatching the message to the sender
			if the sender is also in the list of receivers.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.MessageDispatcher.SendMessage(System.String,System.Object,System.Object,System.Boolean)">
			------------------------------------------------------------------------------------
			<summary>
			Sends a message.
			</summary>
			<param name="msg">The Message without the "On" prefix.</param>
			<param name="sender">The calling object instance.</param>
			<param name="args">The message arguments.</param>
			<param name="skipSender">if set to <c>true</c> messages will not be sent to
			the sender if the sender is also in the receiver list.</param>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.MessageDispatcher.DispatchMessage(System.Object,System.String,System.Object,System.Object)">
			------------------------------------------------------------------------------------
			<summary>
			Dispatches the message.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.MessageDispatcher.DoesReceiverHaveMatchingHandler(System.Object,System.String)">
			------------------------------------------------------------------------------------
			<summary>
			Determines if the specified receiver contains a method with the proper signature.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.MessageDispatcher.SuspendDispatching">
			------------------------------------------------------------------------------------
			<summary>
			Gets or sets a value indicating whether dispatching should be suspended.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Utils.GetWindowRect(System.IntPtr,SilUtils.Utils.RECT@)">
			<summary></summary>
		</member>
		<member name="M:SilUtils.Utils.GlobalMemoryStatus(SilUtils.Utils.MemoryStatus@)">
			<summary>
			The <c>GlobalMemoryStatus</c> function obtains information about the system's
			current usage of both physical and virtual memory.
			</summary>
			<param name="ms">Pointer to a <see cref="T:SilUtils.Utils.MemoryStatus"/>  structure. The
			<c>GlobalMemoryStatus</c> function stores information about current memory
			availability into this structure.</param>
		</member>
		<member name="M:SilUtils.Utils.ForceCloseOfSplashScreen">
			------------------------------------------------------------------------------------
			<summary>
			If the splash screen is showing, this will force it to be closed.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Utils.CenterFormInScreen(System.Windows.Forms.Form)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Utils.GetFreeDiskSpace(System.String)">
			------------------------------------------------------------------------------------
			<summary>
			Gets the amount of free disk space on the specified drive.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Utils.MakeRelativePath(System.String,System.String)">
			------------------------------------------------------------------------------------
			<summary>
			Makes relPath relative to fixedPath, but only if relPath is rooted.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Utils.MakeSafeFileName(System.String,System.Char)">
			------------------------------------------------------------------------------------
			<summary>
			Makes the specified name safe to use as file name in the target OS. This is done
			by replacing all invalid file name characters found in the specified file name
			with the specified replacement character. Passing '\0' as the replacement character
			will remove invalid characters without replacing any.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Utils.PrepFilePathForMsgBox(System.String)">
			------------------------------------------------------------------------------------
			<summary>
			Since a file path may contain '\n' and passing a string to STMsgBox will convert
			those to a new line character (which would not be good for a file path), this
			method will go through the specified file path and prepare it to be properly
			displayed in a message box via the STMsgBox method.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Utils.MsgBox(System.String)">
			------------------------------------------------------------------------------------
			<summary>
			Displays a speech tools message box with just an OK button and an information icon.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Utils.MsgBox(System.String,System.Windows.Forms.MessageBoxIcon)">
			------------------------------------------------------------------------------------
			<summary>
			Displays a speech tools message box with just an OK button and an information icon.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Utils.MsgBox(System.String,System.Windows.Forms.MessageBoxButtons)">
			------------------------------------------------------------------------------------
			<summary>
			Displays a speech tools message box with an icon that is determined by the buttons.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Utils.MsgBox(System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon)">
			------------------------------------------------------------------------------------
			<summary>
			Displays a speech tools message box.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Utils.RemoveAcceleratorPrefix(System.String)">
			------------------------------------------------------------------------------------
			<summary>
			Removes the ampersand accerlerator prefix from the specified text.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Utils.ConvertLiteralNewLines(System.String)">
			------------------------------------------------------------------------------------
			<summary>
			Searches the specified string for literal newline characters '\\n' and replaces
			them with real new line (i.e. '\n') characters.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Utils.GetStringFormat(System.Boolean)">
			------------------------------------------------------------------------------------
			<summary>
			Creates a StringFormat object based on the GenericDefault string format but
			includes vertical centering, EllipsisCharacter trimming and the NoWrap format
			flag. Horizontal alignment is centered when horizontalCenter is true. Otherwise
			horizontal alignment is near.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Utils.GetLocalPath(System.String,System.Boolean)">
			------------------------------------------------------------------------------------
			<summary>
			Gets the full path and filename for the specified file, first the application's
			startup directory is checked. If that fails, then the executing assemblies
			path is checked.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Utils.GetLocalPath(System.Reflection.Assembly,System.String,System.Boolean)">
			------------------------------------------------------------------------------------
			<summary>
			Gets the full path and filename for the specified file, first the application's
			startup directory is checked. If that fails, then the executing assemblies
			path is checked.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Utils.GetMyAssemblyPath">
			------------------------------------------------------------------------------------
			<summary>
			Gets the full path of the assembly in which exists the method that called this
			method.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Utils.SerializeData(System.String,System.Object)">
			------------------------------------------------------------------------------------
			<summary>
			Serializes an object to the specified file.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Utils.SerializeToString``1(``0)">
			------------------------------------------------------------------------------------
			<summary>
			Serializes an object to an XML string.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Utils.DeserializeData(System.String,System.Type)">
			------------------------------------------------------------------------------------
			<summary>
			Deserializes data from the specified file to an object of the specified type.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Utils.DeserializeData(System.String,System.Type,System.Exception@)">
			------------------------------------------------------------------------------------
			<summary>
			Deserializes data from the specified file to an object of the specified type.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Utils.DeserializeFromString``1(System.String)">
			------------------------------------------------------------------------------------
			<summary>
			Deserializes XML from the specified string to an object of the specified type.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Utils.DeserializeFromString``1(System.String,System.Exception@)">
			------------------------------------------------------------------------------------
			<summary>
			Deserializes XML from the specified string to an object of the specified type.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Utils.TryFloatParse(System.String,System.Single@)">
			------------------------------------------------------------------------------------
			<summary>
			This method calls TryFloatParse with NO CultureInfo and returns the boolean result.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Utils.TryFloatParse(System.String,System.Globalization.CultureInfo,System.Single@)">
			------------------------------------------------------------------------------------
			<summary>
			If the CultureInfo is null, then this method will try a plain-vanilla float parse,
			which uses the current culture's number system. If that fails, then it tries
			parsing using the English number system just in case the string contains a period
			for the decimal point.
			If the CultureInfo is NOT null, then this method will parse the input string
			in the specified culture-specific format.
			This will handle situations when a string containing a decimal point is being
			parsed on a computer whose locale is European (e.g. German) where they use a
			comma for the decimal separator.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Utils.WaitCursors(System.Boolean)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Utils.SetWindowRedraw(System.Windows.Forms.Control,System.Boolean)">
			------------------------------------------------------------------------------------
			<summary>
			Turns window redrawing on or off. After turning on, the window will be invalidated.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Utils.SetWindowRedraw(System.Windows.Forms.Control,System.Boolean,System.Boolean)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.Utils.SuppressMsgBoxInteractions">
			------------------------------------------------------------------------------------
			<summary>
			Gets or sets a value indicating whether or not calls to MsgBox will actaully show
			a message box.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.Utils.MessageBoxJustShown">
			------------------------------------------------------------------------------------
			<summary>
			Gets or sets a flag indicating whether or not the MsgBox method was just used
			to display a message box.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.Utils.SilSoftwarePath">
			------------------------------------------------------------------------------------
			<summary>
			Gets the path to the SIL software folder within the user's "My Documents" folder.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.Utils.SilSoftwareCommonFilesPath">
			------------------------------------------------------------------------------------
			<summary>
			Gets the path to the common files within the user's "My Documents\SIL Software"
			folder.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="T:SilUtils.Utils.RECT">
			<summary></summary>
		</member>
		<member name="F:SilUtils.Utils.RECT.left">
			<summary></summary>
		</member>
		<member name="F:SilUtils.Utils.RECT.top">
			<summary></summary>
		</member>
		<member name="F:SilUtils.Utils.RECT.right">
			<summary></summary>
		</member>
		<member name="F:SilUtils.Utils.RECT.bottom">
			<summary></summary>
		</member>
		<member name="T:SilUtils.Utils.MemoryStatus">
			<summary>
			The <c>MemoryStatus</c> structure contains information about the current
			state of both physical and virtual memory.
			</summary>
		</member>
		<member name="F:SilUtils.Utils.MemoryStatus.dwLength">
			<summary>
			Size of the <c>MemoryStatus</c> data structure, in bytes. You do not
			need to set this member before calling the <see cref="M:SilUtils.Utils.GlobalMemoryStatus(SilUtils.Utils.MemoryStatus@)"/>
			function; the function sets it.
			</summary>
		</member>
		<member name="F:SilUtils.Utils.MemoryStatus.dwMemoryLoad">
			<summary>See MSDN documentation</summary>
		</member>
		<member name="F:SilUtils.Utils.MemoryStatus.dwTotalPhys">
			<summary>Total size of physical memory, in bytes.</summary>
		</member>
		<member name="F:SilUtils.Utils.MemoryStatus.dwAvailPhys">
			<summary>Size of physical memory available, in bytes. </summary>
		</member>
		<member name="F:SilUtils.Utils.MemoryStatus.dwTotalPageFile">
			<summary>Size of the committed memory limit, in bytes. </summary>
		</member>
		<member name="F:SilUtils.Utils.MemoryStatus.dwAvailPageFile">
			<summary>Size of available memory to commit, in bytes.</summary>
		</member>
		<member name="F:SilUtils.Utils.MemoryStatus.dwTotalVirtual">
			<summary>Total size of the user mode portion of the virtual address space of
			the calling process, in bytes.</summary>
		</member>
		<member name="F:SilUtils.Utils.MemoryStatus.dwAvailVirtual">
			<summary>Size of unreserved and uncommitted memory in the user mode portion
			of the virtual address space of the calling process, in bytes.</summary>
		</member>
		<member name="T:SilUtils.Properties.Resources">
			<summary>
			  A strongly-typed resource class, for looking up localized strings, etc.
			</summary>
		</member>
		<member name="P:SilUtils.Properties.Resources.ResourceManager">
			<summary>
			  Returns the cached ResourceManager instance used by this class.
			</summary>
		</member>
		<member name="P:SilUtils.Properties.Resources.Culture">
			<summary>
			  Overrides the current thread's CurrentUICulture property for all
			  resource lookups using this strongly typed resource class.
			</summary>
		</member>
		<member name="P:SilUtils.Properties.Resources.kstidHierarchicalRowChildCountLongFmt">
			<summary>
			  Looks up a localized string similar to ({0} records).
			</summary>
		</member>
		<member name="P:SilUtils.Properties.Resources.kstidHierarchicalRowChildCountMedFmt">
			<summary>
			  Looks up a localized string similar to ({0} rec.).
			</summary>
		</member>
		<member name="P:SilUtils.Properties.Resources.kstidHierarchicalRowChildCountShortFmt">
			<summary>
			  Looks up a localized string similar to ({0}).
			</summary>
		</member>
		<member name="T:SilUtils.SilGrid">
			----------------------------------------------------------------------------------------
			<summary>

			</summary>
			----------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilGrid.#ctor">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilGrid.OnSizeChanged(System.EventArgs)">
			------------------------------------------------------------------------------------
			<summary>
			Update the water mark when the grid changes size.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilGrid.OnGotFocus(System.EventArgs)">
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilGrid.OnLeave(System.EventArgs)">
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilGrid.OnScroll(System.Windows.Forms.ScrollEventArgs)">
			------------------------------------------------------------------------------------
			<summary>
			Update the water mark when the grid scrolls.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilGrid.OnPaint(System.Windows.Forms.PaintEventArgs)">
			------------------------------------------------------------------------------------
			<summary>
			Paints a water mark when the results are stale (i.e. the query settings have been
			changed since the results were shown).
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilGrid.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
			------------------------------------------------------------------------------------
			<summary>
			When a cell is in the edit mode and all the text in the edit control is selected,
			pressing the home key changes the cell to the first cell in the row and pressing
			the end key changes the cell to the last cell in the row. This seems counter
			intuitive. I would expect the cursor to move to the beginning or end of the text
			within the edit control, therefore, this method will trap those two keys and
			force this desired behavior, then eat the key message as though it wasn't
			dispatched.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilGrid.ProcessHomeAndEndKeys(System.Windows.Forms.TextBox,System.Windows.Forms.Keys)">
			------------------------------------------------------------------------------------
			<summary>
			Processes the home and end keys.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilGrid.ProcessUpKey(System.Windows.Forms.TextBox)">
			------------------------------------------------------------------------------------
			<summary>
			Processes up key when a grid cell is in the edit mode. This overrides the default
			behavior in a grid cell when it's being edited so using the up arrow will move the
			IP up one line rather than moving to the previous row.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilGrid.ProcessDownKey(System.Windows.Forms.TextBox)">
			------------------------------------------------------------------------------------
			<summary>
			Processes down key when a grid cell is in the edit mode. This overrides the default
			behavior in a grid cell when it's being edited so using the down arrow will move the
			IP down one line rather than moving to the next row.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilGrid.OnCellMouseDown(System.Windows.Forms.DataGridViewCellMouseEventArgs)">
			------------------------------------------------------------------------------------
			<summary>
			In order to achieve double buffering without the problem that arises from having
			double buffering on while sizing rows and columns or dragging columns around,
			monitor when the mouse goes down and turn off double buffering when it goes down
			on a column heading or over the dividers between rows or the dividers between
			columns.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilGrid.OnCellMouseUp(System.Windows.Forms.DataGridViewCellMouseEventArgs)">
			------------------------------------------------------------------------------------
			<summary>
			When double buffering is off, it means it was turned off in the cell mouse down
			event. Therefore, turn it back on.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilGrid.OnRowsAdded(System.Windows.Forms.DataGridViewRowsAddedEventArgs)">
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilGrid.OnRowsRemoved(System.Windows.Forms.DataGridViewRowsRemovedEventArgs)">
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilGrid.OnCurrentCellDirtyStateChanged(System.EventArgs)">
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilGrid.OnEditingControlShowing(System.Windows.Forms.DataGridViewEditingControlShowingEventArgs)">
			------------------------------------------------------------------------------------
			<summary>
			Check if we need to modify the drop-down style of the grid's combo box.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilGrid.SortComboList(System.Windows.Forms.ComboBox)">
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilGrid.OnCellValidating(System.Windows.Forms.DataGridViewCellValidatingEventArgs)">
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilGrid.AddRow(System.Object[])">
			------------------------------------------------------------------------------------
			<summary>
			For grids containing combo box columns created using the
			CreateDropDownComboBoxColumn method, this way of adding rows should be used since
			it will verify (before adding the row to the rows collection) that items added
			to those columns will have corresponding items in their drop-down list.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilGrid.VerifyComboItemsFromRow(System.Windows.Forms.DataGridViewRow)">
			------------------------------------------------------------------------------------
			<summary>
			This method will go through the values in the specified row and verify, that for
			each DropDown style combo. item in the row, the combo. list contains the item in
			the row.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilGrid.OnCurrentCellChanged(System.EventArgs)">
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilGrid.OnCellPainting(System.Windows.Forms.DataGridViewCellPaintingEventArgs)">
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilGrid.DrawExtendedColumnHeaderRow(System.Windows.Forms.DataGridViewCellPaintingEventArgs)">
			------------------------------------------------------------------------------------
			<summary>
			This method fills in the gap between the header of the last visible column and the
			right edge of the grid. That gap is filled with something that looks like one long
			empty column header.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilGrid.DrawFocusRectangle(System.Windows.Forms.DataGridViewCellPaintingEventArgs)">
			--------------------------------------------------------------------------------------------
			<summary>

			</summary>
			--------------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilGrid.OnRowPostPaint(System.Windows.Forms.DataGridViewRowPostPaintEventArgs)">
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilGrid.InvalidateRowInFullRowSelectMode(System.Int32)">
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilGrid.OnCurrentRowChanged(System.EventArgs)">
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilGrid.CreateTextBoxColumn(System.String)">
			------------------------------------------------------------------------------------
			<summary>
			Creates a text box grid column.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilGrid.CreateDropDownListComboBoxColumn(System.String,System.Collections.Generic.List{System.String})">
			------------------------------------------------------------------------------------
			<summary>
			Creates a combo. box grid column whose cell values must be chosen from the
			drop-down list.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilGrid.CreateDropDownListComboBoxColumn(System.String,System.Collections.ArrayList)">
			------------------------------------------------------------------------------------
			<summary>
			Creates a combo. box grid column whose cell values must be chosen from the
			drop-down list.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilGrid.CreateDropDownListComboBoxColumn(System.String,System.Object[])">
			------------------------------------------------------------------------------------
			<summary>
			Creates a combo. box grid column whose cell values must be chosen from the
			drop-down list.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilGrid.CreateDropDownComboBoxColumn(System.String,System.Collections.ArrayList)">
			------------------------------------------------------------------------------------
			<summary>
			Creates a combo. box grid column whose cell values can be set by choosing a value
			from the drop-down list or by typing one into the cell, even one that doesn't
			appear in the drop-down list. If a value is typed into the cell that doesn't
			appear in the drop-down list, that value is added to the list when the cell is
			validated.
			</summary>
			<param name="name"></param>
			<param name="items"></param>
			<returns></returns>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilGrid.CreateDropDownComboBoxColumn(System.String,System.Object[])">
			------------------------------------------------------------------------------------
			<summary>
			Creates a combo. box grid column whose cell values can be set by choosing a value
			from the drop-down list or by typing one into the cell, even one that doesn't
			appear in the drop-down list. If a value is typed into the cell that doesn't
			appear in the drop-down list, that value is added to the list when the cell is
			validated.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilGrid.CreateCheckBoxColumn(System.String)">
			------------------------------------------------------------------------------------
			<summary>
			Creates a check box grid column.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilGrid.CreateImageColumn(System.String)">
			------------------------------------------------------------------------------------
			<summary>
			Creates an image grid column.
			</summary>
			<param name="name"></param>
			<returns></returns>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SilGrid.CreateSilButtonColumn(System.String)">
			------------------------------------------------------------------------------------
			<summary>
			Creates a SilButtonColumn grid column.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="E:SilUtils.SilGrid.CurrentRowChanged">
			<summary>Occurs when a row is entered and after the current row's index changes.</summary>
		</member>
		<member name="P:SilUtils.SilGrid.RowCountLessNewRow">
			------------------------------------------------------------------------------------
			<summary>
			Gets the count of rows in the grid, excluding the new row (which really isn't a
			row until someone enters data into it).
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.SilGrid.IsDirty">
			------------------------------------------------------------------------------------
			<summary>
			Gets or sets a value indicating whether or not the grid's contents are dirty.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.SilGrid.PaintHeaderAcrossFullGridWidth">
			------------------------------------------------------------------------------------
			<summary>
			Paints a header in the gap (if there is one) between the furthest right column and
			the right edge of the grid control.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.SilGrid.ExtendFullRowSelectRectangleToEdge">
			------------------------------------------------------------------------------------
			<summary>
			When the selection mode is full row and the right edge of the last column doesn't
			extend to the right edge of the client area, setting this flag to true will cause
			the full row selection rectangle to extend all the way to the right edge of the
			grid.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.SilGrid.PaintFullRowFocusRectangle">
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.SilGrid.FullRowFocusRectangleColor">
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.SilGrid.ShowWaterMarkWhenDirty">
			------------------------------------------------------------------------------------
			<summary>
			Gets or sets a value indicating whether or not a water mark is shown when the grid
			is dirty.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.SilGrid.WaterMark">
			------------------------------------------------------------------------------------
			<summary>
			Gets or sets the character displayed as the water mark.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.SilGrid.WaterMarkRectangle">
			------------------------------------------------------------------------------------
			<summary>
			Gets the rectangle in which the watermark is drawn.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.SilGrid.VScrollBar">
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.SilGrid.HScrollBar">
			------------------------------------------------------------------------------------
		</member>
		<member name="T:SilUtils.SplashScreenForm">
			----------------------------------------------------------------------------------------
			<summary>

			</summary>
			----------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SplashScreenForm.#ctor">
			------------------------------------------------------------------------------------
			<summary>
			Default Constructor for SplashScreen
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SplashScreenForm.#ctor(System.Boolean,SilUtils.VersionType)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SplashScreenForm.Dispose(System.Boolean)">
			------------------------------------------------------------------------------------
			<summary>
			Disposes of the resources (other than memory) used by the
			<see cref="T:System.Windows.Forms.Form"></see>.
			</summary>
			<param name="disposing">true to release both managed and unmanaged resources; false
			to release only unmanaged resources.</param>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SplashScreenForm.InitializeComponent">
			<summary>
			Required method for Designer support - do not modify
			the contents of this method with the code editor.
			</summary>
		</member>
		<member name="M:SilUtils.SplashScreenForm.RealShow(System.Threading.EventWaitHandle,System.Boolean)">
			------------------------------------------------------------------------------------
			<summary>
			Shows the splash screen
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SplashScreenForm.RealActivate">
			----------------------------------------------------------------------------------------
			<summary>
			Activates (brings back to the top) the splash screen (assuming it is already visible
			and the application showing it is the active application).
			</summary>
			----------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SplashScreenForm.RealClose">
			----------------------------------------------------------------------------------------
			<summary>
			Closes the splash screen
			</summary>
			----------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SplashScreenForm.SetMessage(System.String)">
			------------------------------------------------------------------------------------
			<summary>
			The message to display to indicate startup activity on the splash screen
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SplashScreenForm.SetProdName(System.String)">
			------------------------------------------------------------------------------------
			<summary>
			The product name which appears in the Name label on the splash screen
			</summary>
			<remarks>
			.Net clients should not set this. It will be ignored. They should set the
			AssemblyTitle attribute in AssemblyInfo.cs of the executable.
			</remarks>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SplashScreenForm.SetProdVersion(System.String)">
			------------------------------------------------------------------------------------
			<summary>
			The product version which appears in the App Version label on the splash screen
			</summary>
			<remarks>
			.Net clients should not set this. It will be ignored. They should set the
			AssemblyFileVersion attribute in AssemblyInfo.cs of the executable.
			</remarks>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SplashScreenForm.SetCopyright(System.String)">
			------------------------------------------------------------------------------------
			<summary>
			The copyright info which appears in the Copyright label on the splash screen
			</summary>
			<remarks>
			.Net clients should not set this. It will be ignored. They should set the
			AssemblyCopyrightAttribute attribute in AssemblyInfo.cs of the executable.
			</remarks>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SplashScreenForm.OnShown(System.EventArgs)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SplashScreenForm.OnVisibleChanged(System.EventArgs)">
			------------------------------------------------------------------------------------
			<summary>
			Raises the <see cref="E:System.Windows.Forms.Control.VisibleChanged"></see> event.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SplashScreenForm.OnHandleCreated(System.EventArgs)">
			------------------------------------------------------------------------------------
			<summary>
			Tasks needing to be done when Window is being opened: Set window position.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SplashScreenForm.InitControlLabels">
			------------------------------------------------------------------------------------
			<summary>
			Initialize text of controls prior to display
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SplashScreenForm.HandleBackgroundPanelPaint(System.Object,System.Windows.Forms.PaintEventArgs)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SplashScreenForm.OnUpdateOpacity(System.Object,System.EventArgs)">
			------------------------------------------------------------------------------------
			<summary>
			Timer event to increase the opacity of the splash screen over time. Since this
			event occurs in a different thread from the one in which the form exists, we
			cannot set the form's opacity property in this thread because it will generate
			a cross threading error. Calling the invoke method will invoke the method on
			the same thread in which the form was created.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SplashScreenForm.UpdateOpacity">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SplashScreenForm.MakeFullyOpaque">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.SplashScreenForm.ShowStandardSILContent">
			------------------------------------------------------------------------------------
		</member>
		<member name="T:SilUtils.CheckBoxColumnHeaderHandler">
			----------------------------------------------------------------------------------------
			<summary>
			This class draws a checkbox in a column header and lets the user click/unclick the
			check box, firing an event when they do so. IMPORTANT: This class must be instantiated
			after the column has been added to a DataGridView control.
			</summary>
			----------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.CheckBoxColumnHeaderHandler.#ctor(System.Windows.Forms.DataGridViewColumn)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.CheckBoxColumnHeaderHandler.HandleHandleDestroyed(System.Object,System.EventArgs)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.CheckBoxColumnHeaderHandler.HandleGridRowsRemoved(System.Object,System.Windows.Forms.DataGridViewRowsRemovedEventArgs)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.CheckBoxColumnHeaderHandler.HandleGridRowsAdded(System.Object,System.Windows.Forms.DataGridViewRowsAddedEventArgs)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.CheckBoxColumnHeaderHandler.HandleGridScroll(System.Object,System.Windows.Forms.ScrollEventArgs)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.CheckBoxColumnHeaderHandler.UpdateHeadersCheckStateFromColumnsValues">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.CheckBoxColumnHeaderHandler.UpdateColumnsDataValuesFromHeadersCheckState">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.CheckBoxColumnHeaderHandler.HandleDataCellCellContentClick(System.Object,System.Windows.Forms.DataGridViewCellEventArgs)">
			------------------------------------------------------------------------------------
			<summary>
			Handles toggling the selected state of a file in the file list.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.CheckBoxColumnHeaderHandler.HandleHeaderCellMouseClick(System.Object,System.Windows.Forms.DataGridViewCellMouseEventArgs)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.CheckBoxColumnHeaderHandler.HandleHeaderCellMouseMove(System.Object,System.Windows.Forms.DataGridViewCellMouseEventArgs)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.CheckBoxColumnHeaderHandler.HandleHeaderCellPainting(System.Object,System.Windows.Forms.DataGridViewCellPaintingEventArgs)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.CheckBoxColumnHeaderHandler.DrawVisualStyleCheckBox(System.Drawing.IDeviceContext,System.Drawing.Rectangle)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.CheckBoxColumnHeaderHandler.HeadersCheckState">
			------------------------------------------------------------------------------------
			<summary>
			Gets or sets the state of the column header's check box.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.XmlSerializationHelper.SerializeToByteArray``1(``0)">
			------------------------------------------------------------------------------------
			<summary>
			Serializes an object to an XML represented in an array of UTF-8 bytes.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.XmlSerializationHelper.SerializeToByteArray``1(``0,System.Boolean)">
			------------------------------------------------------------------------------------
			<summary>
			Serializes an object to an XML represented in an array of UTF-8 bytes.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.XmlSerializationHelper.SerializeToString``1(``0)">
			------------------------------------------------------------------------------------
			<summary>
			Serializes an object to an XML string.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.XmlSerializationHelper.SerializeToString``1(``0,System.Boolean)">
			------------------------------------------------------------------------------------
			<summary>
			Serializes an object to an XML string. (Of course, the string is a UTF-16 string.)
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.XmlSerializationHelper.SerializeToFile``1(System.String,``0)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.XmlSerializationHelper.SerializeToFile``1(System.String,``0,System.Exception@)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.XmlSerializationHelper.SerializeToFile``1(System.String,``0,System.String)">
			------------------------------------------------------------------------------------
			<summary>
			Serializes an object to a the specified file.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.XmlSerializationHelper.SerializeToFile``1(System.String,``0,System.String,System.Exception@)">
			------------------------------------------------------------------------------------
			<summary>
			Serializes an object to a the specified file.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.XmlSerializationHelper.SerializeDataAndWriteAsNode``1(System.Xml.XmlWriter,``0)">
			------------------------------------------------------------------------------------
			<summary>
			Serializes the specified data to a string and writes that XML using the specified
			writer. Since strings in .Net are UTF16, the serialized XML data string is, of
			course, UTF16. Before the string is written it is converted to UTF8. So the
			assumption is the writer is expecting UTF8 data.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.XmlSerializationHelper.DeserializeFromString``1(System.String)">
			------------------------------------------------------------------------------------
			<summary>
			Deserializes XML from the specified string to an object of the specified type.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.XmlSerializationHelper.DeserializeFromString``1(System.String,System.Boolean)">
			------------------------------------------------------------------------------------
			<summary>
			Deserializes XML from the specified string to an object of the specified type.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.XmlSerializationHelper.DeserializeFromString``1(System.String,System.Exception@)">
			------------------------------------------------------------------------------------
			<summary>
			Deserializes XML from the specified string to an object of the specified type.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.XmlSerializationHelper.DeserializeFromString``1(System.String,System.Boolean,System.Exception@)">
			------------------------------------------------------------------------------------
			<summary>
			Deserializes XML from the specified string to an object of the specified type.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.XmlSerializationHelper.DeserializeFromFile``1(System.String)">
			------------------------------------------------------------------------------------
			<summary>
			Deserializes XML from the specified file to an object of the specified type.
			</summary>
			<typeparam name="T">The object type</typeparam>
			<param name="filename">The filename from which to load</param>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.XmlSerializationHelper.DeserializeFromFile``1(System.String,System.String)">
			------------------------------------------------------------------------------------
			<summary>
			Deserializes XML from the specified file to an object of the specified type.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.XmlSerializationHelper.DeserializeFromFile``1(System.String,System.Boolean)">
			------------------------------------------------------------------------------------
			<summary>
			Deserializes XML from the specified file to an object of the specified type.
			</summary>
			<typeparam name="T">The object type</typeparam>
			<param name="filename">The filename from which to load</param>
			<param name="fKeepWhitespaceInElements">if set to <c>true</c>, the reader
			will preserve and return elements that contain only whitespace, otherwise
			these elements will be ignored during a deserialization.</param>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.XmlSerializationHelper.DeserializeFromFile``1(System.String,System.String,System.Boolean)">
			------------------------------------------------------------------------------------
			<summary>
			Deserializes XML from the specified file to an object of the specified type.
			</summary>
			<typeparam name="T">The object type</typeparam>
			<param name="filename">The filename from which to load</param>
			<param name="rootElementName">Name to expect for the root element. This is
			good when T is a generic list of some type (e.g. List of strings).</param>
			<param name="fKeepWhitespaceInElements">if set to <c>true</c>, the reader
			will preserve and return elements that contain only whitespace, otherwise
			these elements will be ignored during a deserialization.</param>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.XmlSerializationHelper.DeserializeFromFile``1(System.String,System.Exception@)">
			------------------------------------------------------------------------------------
			<summary>
			Deserializes XML from the specified file to an object of the specified type.
			</summary>
			<typeparam name="T">The object type</typeparam>
			<param name="filename">The filename from which to load</param>
			<param name="e">The exception generated during the deserialization.</param>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.XmlSerializationHelper.DeserializeFromFile``1(System.String,System.String,System.Exception@)">
			------------------------------------------------------------------------------------
			<summary>
			Deserializes XML from the specified file to an object of the specified type.
			</summary>
			<typeparam name="T">The object type</typeparam>
			<param name="filename">The filename from which to load</param>
			<param name="rootElementName">Name to expect for the root element. This is
			good when T is a generic list of some type (e.g. List of string).</param>
			<param name="e">The exception generated during the deserialization.</param>
			<returns></returns>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.XmlSerializationHelper.DeserializeFromFile``1(System.String,System.Boolean,System.Exception@)">
			------------------------------------------------------------------------------------
			<summary>
			Deserializes XML from the specified file to an object of the specified type.
			</summary>
			<typeparam name="T">The object type</typeparam>
			<param name="filename">The filename from which to load</param>
			<param name="fKeepWhitespaceInElements">if set to <c>true</c>, the reader
			will preserve and return elements that contain only whitespace, otherwise
			these elements will be ignored during a deserialization.</param>
			<param name="e">The exception generated during the deserialization.</param>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.XmlSerializationHelper.DeserializeFromFile``1(System.String,System.String,System.Boolean,System.Exception@)">
			--------------------------------------------------------------------------------
			<summary>
			Deserializes XML from the specified file to an object of the specified type.
			</summary>
			<typeparam name="T">The object type</typeparam>
			<param name="filename">The filename from which to load</param>
			<param name="rootElementName">Name to expect for the root element. This is
			good when T is a generic list of some type (e.g. List of strings).</param>
			<param name="fKeepWhitespaceInElements">if set to <c>true</c>, the reader
			will preserve and return elements that contain only whitespace, otherwise
			these elements will be ignored during a deserialization.</param>
			<param name="e">The exception generated during the deserialization.</param>
			<returns></returns>
			--------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.XmlSerializationHelper.DeserializeInternal``1(System.Xml.XmlReader,System.String)">
			------------------------------------------------------------------------------------
			<summary>
			Deserializes an object using the specified reader.
			</summary>
			<typeparam name="T">The type of object to deserialize</typeparam>
			<param name="reader">The reader.</param>
			<param name="rootElementName">Name to expect for the of the root element.</param>
			<returns>The deserialized object</returns>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.XmlSerializationHelper.deserializer_UnknownAttribute(System.Object,System.Xml.Serialization.XmlAttributeEventArgs)">
			------------------------------------------------------------------------------------
			<summary>
			Handles the UnknownAttribute event of the deserializer control.
			</summary>
			<param name="sender">The source of the event.</param>
			<param name="e">The <see cref="T:System.Xml.Serialization.XmlAttributeEventArgs"/>
			instance containing the event data.</param>
			------------------------------------------------------------------------------------
		</member>
		<member name="T:SilUtils.XmlSerializationHelper.InternalXmlReader">
			------------------------------------------------------------------------------------
			<summary>
			Custom XmlTextReader that can preserve whitespace characters (spaces, tabs, etc.)
			that are in XML elements. This allows us to properly handle deserialization of
			paragraph runs that contain runs that contain only whitespace characters.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.XmlSerializationHelper.InternalXmlReader.#ctor(System.IO.TextReader,System.Boolean)">
			--------------------------------------------------------------------------------
			<summary>
			Initializes a new instance of the <see cref="T:SilUtils.XmlSerializationHelper.InternalXmlReader"/> class.
			</summary>
			<param name="reader">The stream reader.</param>
			<param name="fKeepWhitespaceInElements">if set to <c>true</c>, the reader
			will preserve and return elements that contain only whitespace, otherwise
			these elements will be ignored during a deserialization.</param>
			--------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.XmlSerializationHelper.InternalXmlReader.#ctor(System.String,System.Boolean)">
			--------------------------------------------------------------------------------
			<summary>
			Initializes a new instance of the <see cref="T:SilUtils.XmlSerializationHelper.InternalXmlReader"/> class.
			</summary>
			<param name="filename">The filename.</param>
			<param name="fKeepWhitespaceInElements">if set to <c>true</c>, the reader
			will preserve and return elements that contain only whitespace, otherwise
			these elements will be ignored during a deserialization.</param>
			--------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.XmlSerializationHelper.InternalXmlReader.Read">
			--------------------------------------------------------------------------------
			<summary>
			Reads the next node from the stream.
			</summary>
			--------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.XmlSerializationHelper.InternalXmlReader.NamespaceURI">
			--------------------------------------------------------------------------------
			<summary>
			Gets the namespace URI (as defined in the W3C Namespace specification) of the
			node on which the reader is positioned.
			</summary>
			<value></value>
			<returns>The namespace URI of the current node; otherwise an empty string.</returns>
			--------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.XmlSerializationHelper.InternalXmlReader.NodeType">
			--------------------------------------------------------------------------------
			<summary>
			Gets the type of the current node.
			</summary>
			--------------------------------------------------------------------------------
		</member>
		<member name="T:SilUtils.XmlHelper">
			----------------------------------------------------------------------------------------
			<summary>

			</summary>
			----------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.XmlHelper.IsEmptyOrInvalid(System.String)">
			------------------------------------------------------------------------------------
			<summary>
			Full path and file name of the xml file to verify.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.XmlHelper.TransformFile(System.String,System.IO.Stream)">
			------------------------------------------------------------------------------------
			<summary>
			Transforms the specified input file using the xslt contained in the specifed
			stream. The result is returned in a temporary file. It's expected the caller
			will move the file to the desired location.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.XmlHelper.GetAttributeValue(System.Xml.XmlNode,System.String)">
			------------------------------------------------------------------------------------
			<summary>
			Gets an attribute's value from the specified node.
			</summary>
			<param name="node"></param>
			<param name="attribute"></param>
			<returns>String value of the attribute or null if it cannot be found.</returns>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.XmlHelper.GetIntFromAttribute(System.Xml.XmlNode,System.String,System.Int32)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.XmlHelper.GetFloatFromAttribute(System.Xml.XmlNode,System.String,System.Single)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.XmlHelper.GetBoolFromAttribute(System.Xml.XmlNode,System.String)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.XmlHelper.GetBoolFromAttribute(System.Xml.XmlNode,System.String,System.Boolean)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="T:SilUtils.MruFiles">
			----------------------------------------------------------------------------------------
			<summary>
			Encapsulates a class to manage the list of most recently used project paths.
			</summary>
			----------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.MruFiles.Initialize(System.Collections.Specialized.StringCollection)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.MruFiles.Initialize(System.Collections.Specialized.StringCollection,System.Int32)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.MruFiles.RemoveStalePaths">
			------------------------------------------------------------------------------------
			<summary>
			Removes non existant paths from the MRU list.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.MruFiles.AddNewPath(System.String)">
			------------------------------------------------------------------------------------
			<summary>
			Adds the specified file path to top of list of most recently used files if it
			exists (returns false if it doesn't exist)
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.MruFiles.AddNewPath(System.String,System.Boolean)">
			------------------------------------------------------------------------------------
			<summary>
			Adds the specified file path to top of list of most recently used files if it
			exists (returns false if it doesn't exist)
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.MruFiles.Latest">
			------------------------------------------------------------------------------------
			<summary>
			Gets the path to the most recently used (i.e. opened) project.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.MruFiles.Paths">
			------------------------------------------------------------------------------------
			<summary>
			Gets the list of most recently used files as a string array.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="T:SilUtils.GridCellPiecePainter">
			----------------------------------------------------------------------------------------
			<summary>
			Draws a string to be displayed like a phonetic search result is drawn in a grid cell
			of a list of phonetic search results.
			</summary>
			----------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.GridCellPiecePainter.#ctor(System.Drawing.Font,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,SilUtils.GridCellPiecePainter.DrawPiecesHandler)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.GridCellPiecePainter.Paint(System.Windows.Forms.DataGridViewCellPaintingEventArgs,System.String[],System.Int32,System.Int32)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.GridCellPiecePainter.Paint(System.Windows.Forms.DataGridViewCellPaintingEventArgs,System.String[],System.Int32,System.Int32,System.Boolean)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.GridCellPiecePainter.DrawMiddlePieceBackground(System.Drawing.Graphics,System.Boolean,System.Drawing.Rectangle@,System.Int32,System.Int32)">
			------------------------------------------------------------------------------------
			<summary>
			Draw the middle piece's background, taking into consideration when the
			cell is selected. In that case, the highlighted background is made a
			little transparent so the row's selection color shows through.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="T:SilUtils.SerializableFont">
			----------------------------------------------------------------------------------------
			<summary>
			Encapsulates a font object that can be serialized.
			</summary>
			----------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SerializableFont.#ctor">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.SerializableFont.#ctor(System.Drawing.Font)">
			------------------------------------------------------------------------------------
			<summary>
			Intializes a new Serializable font object from the specified font.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.SerializableFont.Font">
			------------------------------------------------------------------------------------
			<summary>
			Gets a font object based on the SerializableFont's settings or sets the
			SerializableFont's settings.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="T:SilUtils.FontHelper">
			----------------------------------------------------------------------------------------
			<summary>
			Misc. font helper methods.
			</summary>
			----------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.FontHelper.#cctor">
			--------------------------------------------------------------------------------
			<summary>

			</summary>
			--------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.FontHelper.ResetFonts">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.FontHelper.FontInstalled(System.String)">
			------------------------------------------------------------------------------------
			<summary>
			Determines if the specified font is installed on the computer.
			</summary>
			<param name="fontName"></param>
			<returns></returns>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.FontHelper.MakeEticRegFontDerivative(System.Single)">
			------------------------------------------------------------------------------------
			<summary>
			Creates a font object that is a phonetic font derivative with the specified size
			and a regular style.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.FontHelper.FontToString(System.Drawing.Font)">
			------------------------------------------------------------------------------------
			<summary>
			Creates a string containing three pieces of information about the specified font:
			the name, size and style.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.FontHelper.MakeFont(System.String)">
			------------------------------------------------------------------------------------
			<summary>
			Creates a font object with the specified properties. If an error occurs while
			making the font (e.g. because the font doesn't support a particular style) a
			fallback scheme is used.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.FontHelper.MakeFont(System.Drawing.Font,System.Single,System.Drawing.FontStyle)">
			------------------------------------------------------------------------------------
			<summary>
			Creates a font object with the specified properties. If an error occurs while
			making the font (e.g. because the font doesn't support a particular style) a
			fallback scheme is used.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.FontHelper.MakeFont(System.Drawing.Font,System.Single)">
			------------------------------------------------------------------------------------
			<summary>
			Creates a font object with the specified properties. If an error occurs while
			making the font (e.g. because the font doesn't support a particular style) a
			fallback scheme is used.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.FontHelper.MakeFont(System.Drawing.Font,System.Drawing.FontStyle)">
			------------------------------------------------------------------------------------
			<summary>
			Creates a font object with the specified properties. If an error occurs while
			making the font (e.g. because the font doesn't support a particular style) a
			fallback scheme is used.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.FontHelper.MakeFont(System.String,System.Single,System.Drawing.FontStyle)">
			------------------------------------------------------------------------------------
			<summary>
			Creates a font object with the specified properties. If an error occurs while
			making the font (e.g. because the font doesn't support a particular style) a
			fallback scheme is used.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.FontHelper.DefaultPhoneticFont">
			--------------------------------------------------------------------------------
			<summary>
			Gets the default font for displaying phonetic data.
			</summary>
			--------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.FontHelper.PhoneticFont">
			--------------------------------------------------------------------------------
			<summary>
			Gets the font specified for displaying phonetic data.
			</summary>
			--------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.FontHelper.ToneFont">
			--------------------------------------------------------------------------------
			<summary>
			Gets the font specified for displaying tone data.
			</summary>
			--------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.FontHelper.PhonemicFont">
			--------------------------------------------------------------------------------
			<summary>
			Gets the font specified for displaying phonemic data.
			</summary>
			--------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.FontHelper.OrthograpicFont">
			--------------------------------------------------------------------------------
			<summary>
			Gets the font specified for displaying orthographic data.
			</summary>
			--------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.FontHelper.GlossFont">
			--------------------------------------------------------------------------------
			<summary>
			Gets the font specified for displaying gloss data.
			</summary>
			--------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.FontHelper.POSFont">
			--------------------------------------------------------------------------------
			<summary>
			Gets the font specified for displaying part of speech data.
			</summary>
			--------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.FontHelper.ReferenceFont">
			--------------------------------------------------------------------------------
			<summary>
			Gets the font specified for displaying reference data fields.
			</summary>
			--------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.FontHelper.UIFont">
			------------------------------------------------------------------------------------
			<summary>
			Gets the desired font for most UI elements.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="T:SilUtils.PaintState">
			------------------------------------------------------------------------------------
			<summary>
			Possible painting states for DrawHotBackground
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="T:SilUtils.PaintingHelper">
			----------------------------------------------------------------------------------------
			<summary>
			Contains misc. static methods for various customized painting.
			</summary>
			----------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.PaintingHelper.DrawCustomBorder(System.Windows.Forms.Control)">
			------------------------------------------------------------------------------------
			<summary>
			Draws around the specified control, a fixed single border the color of text
			boxes in a themed environment. If themes are not enabled, the border is black.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.PaintingHelper.DrawCustomBorder(System.Windows.Forms.Control,System.Drawing.Color)">
			------------------------------------------------------------------------------------
			<summary>
			Draws around the specified control, a fixed single border of the specified color.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.PaintingHelper.DrawHotBackground(System.Drawing.Graphics,System.Drawing.Rectangle,SilUtils.PaintState)">
			------------------------------------------------------------------------------------
			<summary>
			Draws a background in the specified rectangle that looks like a toolbar button
			when the mouse is over it, with consideration for whether the look should be like
			the mouse is down or not. Note, when a PaintState of normal is specified, this
			method does nothing. Normal background painting is up to the caller.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.PaintingHelper.CanPaintVisualStyle(System.Windows.Forms.VisualStyles.VisualStyleElement)">
			------------------------------------------------------------------------------------
			<summary>
			Returns a value indicating whether or not visual style rendering is supported
			in the application and if the specified element can be rendered.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.PaintingHelper.CanPaintVisualStyle">
			------------------------------------------------------------------------------------
			<summary>
			Returns a value indicating whether or not visual style rendering is supported
			in the application.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.PaintingHelper.PaintDropDownContainer(System.IntPtr,System.Boolean)">
			------------------------------------------------------------------------------------
			<summary>
			Because the popup containers forces a little padding above and below, we need to get
			the popup's parent (which is the popup container) and paint its background to match
			the menu color.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.PaintingHelper.DrawGradientBackground(System.Drawing.Graphics,System.Drawing.Rectangle)">
			------------------------------------------------------------------------------------
			<summary>
			Fills the specified rectangle with a gradient background consistent with the
			current system's color scheme.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.PaintingHelper.DrawGradientBackground(System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean)">
			------------------------------------------------------------------------------------
			<summary>
			Fills the specified rectangle with a gradient background consistent with the
			current system's color scheme.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="T:SilUtils.IxCoreColleague">
			----------------------------------------------------------------------------------------
			<summary>

			</summary>
			----------------------------------------------------------------------------------------
		</member>
		<member name="T:SilUtils.MediatorDisposeAttribute">
			<summary>
			Add this attribute to a class to say the mediator should dispose of it
			if it is still a coleague of the mediator when that is disposed.
			"Listeners" should normally have this.
			</summary>
		</member>
		<member name="T:SilUtils.Mediator">
			--------------------------------------------------------------------------------------------
			<summary>
			Summary description for Mediator.
			</summary>
			--------------------------------------------------------------------------------------------
		</member>
		<member name="F:SilUtils.Mediator.WM_BROADCAST_ITEM_INQUEUE">
			<summary>This is the message value that is used to communicate the need to process the defered mediator queue</summary>
		</member>
		<member name="M:SilUtils.Mediator.AddDisposedColleague(System.String)">
			------------------------------------------------------------------------------------
			<summary>
			Adds the disposed colleague.
			</summary>
			<param name="hashKey">The hash key.</param>
			------------------------------------------------------------------------------------
		</member>
		<member name="F:SilUtils.Mediator.showPendingMsgsSwitch">
			<summary>
			Control how much output we send to the application's listeners (e.g. visual studio output window)
			</summary>
		</member>
		<member name="F:SilUtils.Mediator.m_pendingMessages">
			<summary>
			variables for a pending message, to be handled in the idle loop.
			</summary>
		</member>
		<member name="M:SilUtils.Mediator.PostMessage(System.IntPtr,System.Int32,System.UInt32,System.UInt32)">
			<summary>Included here so as to not add another common utils dependancy</summary>
		</member>
		<member name="F:SilUtils.Mediator.m_MethodsNOTonColleagues">
			<summary>keeps a list of classes (colleagues) and the methods that it doesn't contain</summary>
		</member>
		<member name="F:SilUtils.Mediator.m_MethodsOnAnyColleague">
			<summary>Set of method names that are implemented by any colleague</summary>
		</member>
		<member name="M:SilUtils.Mediator.#ctor">
			-----------------------------------------------------------------------------------
			<summary>
			Initializes a new instance of the <see cref="T:SilUtils.Mediator"/> class.
			</summary>
			-----------------------------------------------------------------------------------
		</member>
		<member name="F:SilUtils.Mediator.m_isDisposed">
			<summary>
			True, if the object has been disposed.
			</summary>
		</member>
		<member name="M:SilUtils.Mediator.CheckDisposed">
			------------------------------------------------------------------------------------
			<summary>
			Throw if the IsDisposed property is true
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Mediator.Finalize">
			------------------------------------------------------------------------------------
			<summary>
			Finalizer, in case client doesn't dispose it.
			Force Dispose(false) if not already called (i.e. m_isDisposed is true)
			</summary>
			<remarks>
			In case some clients forget to dispose it directly.
			</remarks>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Mediator.Dispose">
			------------------------------------------------------------------------------------
			<summary>
			Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
			</summary>
			<remarks>Must not be virtual.</remarks>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Mediator.Dispose(System.Boolean)">
			------------------------------------------------------------------------------------
			<summary>
			Executes in two distinct scenarios.
			1. If disposing is true, the method has been called directly
			or indirectly by a user's code via the Dispose method.
			Both managed and unmanaged resources can be disposed.
			2. If disposing is false, the method has been called by the
			runtime from inside the finalizer and you should not reference (access)
			other managed objects, as they already have been garbage collected.
			Only unmanaged resources can be disposed.
			</summary>
			<param name="disposing"><c>true</c> to release both managed and unmanaged resources;
			<c>false</c> to release only unmanaged resources.</param>
			<remarks>
			If any exceptions are thrown, that is fine.
			If the method is being done in a finalizer, it will be ignored.
			If it is thrown by client code calling Dispose,
			it needs to be handled by fixing the bug.
			If subclasses override this method, they should call the base implementation.
			</remarks>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Mediator.IsMessageInPendingQueue(System.String)">
			------------------------------------------------------------------------------------
			<summary>
			Retrieve a copy of the current queue of pending messages
			</summary>
			<param name="message">The message.</param>
			<returns>
				<c>true</c> if [is message in pending queue] [the specified message]; otherwise, <c>false</c>.
			</returns>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Mediator.AddWindowMessage">
			------------------------------------------------------------------------------------
			<summary>
			This posts a WM_BROADCAST... msg to the main app window
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Mediator.AddQueueItem(SilUtils.Mediator.QueueItem)">
			------------------------------------------------------------------------------------
			<summary>
			Add an item to the queue and let the app know an item is present to be processed.
			</summary>
			<param name="item">The item.</param>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Mediator.BroadcastPendingItems">
			------------------------------------------------------------------------------------
			<summary>
			Broadcasts the pending items.
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Mediator.ShowJobItems(System.Int32)">
			------------------------------------------------------------------------------------
			<summary>
			Debugging method to show the items on the queue that are new.
			</summary>
			<param name="startPos">The start pos.</param>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Mediator.DebugMsg(System.String)">
			------------------------------------------------------------------------------------
			<summary>
			Debugs the MSG.
			</summary>
			<param name="msg">The MSG.</param>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Mediator.BuildDebugMsg(System.String)">
			------------------------------------------------------------------------------------
			<summary>
			Builds the debug MSG.
			</summary>
			<param name="msg">The MSG.</param>
			<returns></returns>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Mediator.ProcessItem">
			------------------------------------------------------------------------------------
			<summary>
			Process one of the items in the deferred queue and don't be re-entrant.
			</summary>
			<returns></returns>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Mediator.AddMethodNOTonColleague(System.String,System.String)">
			------------------------------------------------------------------------------------
			<summary>
			Keep a running list of methods that don't exist on objects.  This is static during the life of the object.
			Also assumes that the cost of storing the data structures are cheaper than the repeated calls to try to
			invoke methods that don't exist.
			</summary>
			<param name="method">name of method(EX:OnPropertyChanged)</param>
			<param name="colleague">name of class(EX:XCore.MockupDialogLauncher)</param>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Mediator.IsMethodNOTonColleague(System.String,System.String)">
			------------------------------------------------------------------------------------
			<summary>
			This routine will check the hash of classes (colleagues) and see if the method is listed as not
			being defined for the given class.
			</summary>
			<param name="method">The method.</param>
			<param name="colleague">The colleague.</param>
			<returns>
				<c>true</c> if [is method NO ton colleague] [the specified method]; otherwise, <c>false</c>.
			</returns>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Mediator.BroadcastString(System.String,System.String)">
			------------------------------------------------------------------------------------
			<summary>
			call this method on any object (which implements it) that we can find
			Note that unlike SendMessage(),
			this does not care if anyone claims to have "handled" the message.
			It will keep sending messages to everyone.
			</summary>
			<param name="methodName">Name of the method.</param>
			<param name="stringParam">The string param.</param>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Mediator.SendMessage(System.String,System.Object)">
			------------------------------------------------------------------------------------
			<summary>
			This version is used to invoke commands
			</summary>
			<param name="messageName"></param>
			<param name="parameter"></param>
			<returns><c>true</c> if the message was handled, otherwise <c>false</c></returns>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Mediator.SendMessage(System.String,System.Object,System.Boolean)">
			------------------------------------------------------------------------------------
			<summary>
			This version is used to invoke commands
			</summary>
			<param name="messageName"></param>
			<param name="parameter"></param>
			<param name="fLogIt">True to log the call (if its not an update or idle), false
			otherwise</param>
			<returns><c>true</c> if the message was handled, otherwise <c>false</c></returns>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Mediator.SendMessageToAllNow(System.String,System.Object)">
			------------------------------------------------------------------------------------
			<summary>
			This method is a cross of the broadcast and sendmessage types.  It will send
			the message to everyone right now with out stoping when it's handled.  This is
			provided for places where the previous broadcast functionality is needed, or
			when it's not clear and is desired as a first step.
			</summary>
			<param name="messageName">Name of the message.</param>
			<param name="parameter">The parameter.</param>
			<returns>
			true if one or more colleagues handled the message, else false
			</returns>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Mediator.SendMessageDefered(System.String,System.Object)">
			------------------------------------------------------------------------------------
			<summary>
			This method is a replacement message for the SendMessage when the return value isn't
			actually used.  It allows those messages to be defered for a different message (later).
			</summary>
			<param name="messageName">Name of the message.</param>
			<param name="parameter">The parameter.</param>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Mediator.PostMessage(System.String,System.Object)">
			------------------------------------------------------------------------------------
			<summary>
			Post a command to be sent during an upcoming idle moment.
			</summary>
			<param name="messageName"></param>
			<param name="parameter"></param>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Mediator.PostMessageApplication_Idle(System.Object,System.EventArgs)">
			------------------------------------------------------------------------------------
			<summary>
			Dispatch messages from the post queue
			</summary>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Mediator.BroadcastMessage(System.String,System.Object)">
			------------------------------------------------------------------------------------
			<summary>
			This version is used to broadcast changes that might affect several objects.
			Each of them gets to see it, even if one (or more) claim to have handled it.
			</summary>
			<param name="messageName"></param>
			<param name="parameter"></param>
			<returns><c>true</c> if the message was handled, otherwise <c>false</c></returns>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Mediator.BroadcastMessageUntilHandled(System.String,System.Object)">
			------------------------------------------------------------------------------------
			<summary>
			This is a deferred message, but it's not sent to everyone, it is sent until
			it is handled.
			</summary>
			<param name="messageName">Name of the message.</param>
			<param name="parameter">The parameter.</param>
			<returns></returns>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Mediator.HasReceiver(System.String)">
			------------------------------------------------------------------------------------
			<summary>
			Check to see if there would be someone who would receive this command if it was given right now.
			</summary>
			<param name="messageName">Name of the message.</param>
			<returns>
				<c>true</c> if the specified message name has receiver; otherwise, <c>false</c>.
			</returns>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Mediator.SendCancellableMessage(System.String,System.Object)">
			------------------------------------------------------------------------------------
			<summary>
			Sends the cancellable message.
			</summary>
			<param name="messageName">Name of the message.</param>
			<param name="parameter">The parameter.</param>
			<returns>
			true if the message was canceled, otherwise false.
			</returns>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Mediator.InvokeOnColleagues(System.String,System.Type[],System.Object[],System.Boolean,System.Boolean)">
			------------------------------------------------------------------------------------
			<summary>

			</summary>
			<param name="methodName"></param>
			<param name="parameterTypes"></param>
			<param name="parameterList"></param>
			<param name="stopWhenHandled"></param>
			<param name="justCheckingForReceivers"></param>
			<returns></returns>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Mediator.InvokeRecursively(SilUtils.IxCoreColleague,System.String,System.Type[],System.Object[],System.Collections.Generic.HashSet{System.Int32},System.Boolean,System.Boolean)">
			------------------------------------------------------------------------------------
			<summary>
			Invokes the recursively.
			</summary>
			<param name="colleague">The colleague.</param>
			<param name="methodName">Name of the method.</param>
			<param name="parameterTypes">The parameter types.</param>
			<param name="parameterList">The parameter list.</param>
			<param name="previous">to catch infinite loops</param>
			<param name="stopWhenHandled">if set to <c>true</c> [stop when handled].</param>
			<param name="justCheckingForReceivers">if set to <c>true</c> [just checking for receivers].</param>
			<returns></returns>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Mediator.ColleagueHasBeenDisposed(SilUtils.IxCoreColleague)">
			------------------------------------------------------------------------------------
			<summary>
			Colleagues the has been disposed.
			</summary>
			<param name="target">The target.</param>
			<returns></returns>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Mediator.CheckForMatchingMessage(SilUtils.IxCoreColleague,System.String,System.Type[],System.Object[],System.Collections.Generic.HashSet{System.Int32})">
			------------------------------------------------------------------------------------
			<summary>
			Checks for matching message.
			</summary>
			<param name="target">The target.</param>
			<param name="methodName">Name of the method.</param>
			<param name="parameterTypes">Currently, use null here if you have a ref param</param>
			<param name="parameterList">The parameter list.</param>
			<param name="previous">The previous.</param>
			<returns>
			null or the MethodInfo if a matching one was found
			</returns>
			------------------------------------------------------------------------------------
		</member>
		<member name="M:SilUtils.Mediator.InvokeMethod(SilUtils.IxCoreColleague,System.Reflection.MethodInfo,System.Object[])">
			------------------------------------------------------------------------------------
			<summary>
			Invokes the method.
			</summary>
			<param name="target">The target.</param>
			<param name="mi">The mi.</param>
			<param name="parameterList">The parameter list.</param>
			<returns></returns>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.Mediator.ProcessMessages">
			------------------------------------------------------------------------------------
			<summary>
			Gets or sets a value indicating whether [process messages].
			</summary>
			<value><c>true</c> if [process messages]; otherwise, <c>false</c>.</value>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.Mediator.MainWindow">
			------------------------------------------------------------------------------------
			<summary>
			Set the handle for the main window
			</summary>
			<value>The main window.</value>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.Mediator.SpecificToOneMainWindow">
			------------------------------------------------------------------------------------
			<summary>
			Set this to true immediately if the mediator needs to post messages to one specific window.  If this is set
			to true, then you must set the MainWindow property to the handle of the main window.  Then, after the application
			has sufficiently initialized, call the BroadcastPendingItems method.  Note that while the OnHandleCreated method
			is a good place to set the MainWindow property, it _will not_ work for calling BroadcastPendingItems().
			BroadcastPendingItems() will need to be called some time after the OnHandleCreated method is finished.
			No broadcasts will be sent until both MainWindow has been set and BroadcastPendingItems() has been called.
			</summary>
			<value>
				<c>true</c> if [specific to one main window]; otherwise, <c>false</c>.
			</value>
			------------------------------------------------------------------------------------
		</member>
		<member name="P:SilUtils.Mediator.JobItems">
			------------------------------------------------------------------------------------
			<summary>
			Gets the job items.
			</summary>
			<value>The job items.</value>
			------------------------------------------------------------------------------------
		</member>
		<member name="T:SilUtils.Mediator.PendingMessageItem">
			<summary>
			This class is used by the message queue system.
			</summary>
		</member>
		<member name="T:SilUtils.Mediator.QueueItem">
			<summary>
			This is a simple class that contains the information that is used in the InvokeRecursively method.
			</summary>
		</member>
		<member name="T:SilUtils.Mediator.DisposedInAnotherFrameException">
			<summary>
			Exception that is a special case where the Mediator is working,
			but due to re-entrance has been disposed of in a stack frame that
			is no longer active, but as a result we are in a disposed of state
			and should go straight to the end of our current call frame: SendMessage
			</summary>
		</member>
	</members>
</doc>
